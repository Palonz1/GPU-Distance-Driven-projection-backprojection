#include "utilities.cuh" 
#include "DD3_GPU_proj.h"
#define VAMDSN3409UOJIFK 32 
#define KLZSDHNQ04JAIO 8 
#define SKLJDFNGHW9835GJK35TG 1 
template<typename VNKJH5IORTN, typename VNJEG9485BNIJLIHNW3828934> __global__ void NKCMVN934Q0UFK9340Q345(VNKJH5IORTN*  MCVBKLNFGEO7UDNK92034, VNJEG9485BNIJLIHNW3828934* out_ZXY, VNJEG9485BNIJLIHNW3828934* VHNOREH9384HRGUAIQ121, int CMNOI4BH3958BTUJ23, int QAIWLRUW4W, int VMN0348HGRO2) { int idz = threadIdx.x + blockIdx.x * blockDim.x; int idx = threadIdx.y + blockIdx.y * blockDim.y; int idy = threadIdx.z + blockIdx.z * blockDim.z;  if(idx < CMNOI4BH3958BTUJ23 && idy < QAIWLRUW4W && idz < VMN0348HGRO2) { int i = (idy * CMNOI4BH3958BTUJ23 + idx) * VMN0348HGRO2 + idz; int ni = (idy * (CMNOI4BH3958BTUJ23 + 1) + (idx + 1)) * (VMN0348HGRO2 + 1) + idz + 1; int nj = (idx * (QAIWLRUW4W + 1) + (idy + 1)) * (VMN0348HGRO2 + 1) + idz + 1; out_ZXY[ni] = MCVBKLNFGEO7UDNK92034[i]; VHNOREH9384HRGUAIQ121[nj] = MCVBKLNFGEO7UDNK92034[i]; } }  template<typename VNKJH5IORTN, typename VNJEG9485BNIJLIHNW3828934> __global__ void CVNOU3H4409IJIFEASD12(VNKJH5IORTN*  in, VNJEG9485BNIJLIHNW3828934* out, int N, int VMN0348HGRO2) { int zi = threadIdx.x + blockIdx.x * blockDim.x; if(zi < VMN0348HGRO2) { out[zi] = in[zi]; for(int i = 1;i<N;++i) { out[i * VMN0348HGRO2 + zi] = out[(i - 1) * VMN0348HGRO2 + zi] + in[i * VMN0348HGRO2 + zi]; } } }  template<typename VNKJH5IORTN, typename VNJEG9485BNIJLIHNW3828934> __global__ void DSKLVN083Q4HIRKSKDLHNF89WHEF(VNKJH5IORTN*  in, VNJEG9485BNIJLIHNW3828934* out, int N, int VMN0348HGRO2) { int xyi = threadIdx.x + blockIdx.x * blockDim.x; if(xyi < N) { out[xyi * VMN0348HGRO2] = in[xyi * VMN0348HGRO2]; for(int ii = 1; ii < VMN0348HGRO2; ++ii) { out[xyi * VMN0348HGRO2 + ii] = out[xyi * VMN0348HGRO2 + ii - 1] + in[xyi * VMN0348HGRO2 + ii]; } } }   template<> __global__ void DSKLVN083Q4HIRKSKDLHNF89WHEF(double*  in, int2* out, int N, int VMN0348HGRO2) { int xyi = threadIdx.x + blockIdx.x * blockDim.x; if(xyi < N) { double temp = in[xyi * VMN0348HGRO2]; out[xyi * VMN0348HGRO2] = make_int2(__double2loint(temp),__double2hiint(temp)); double temp2 = 0; for(int ii = 1; ii < VMN0348HGRO2; ++ii) { temp2 = temp + in[xyi * VMN0348HGRO2 + ii]; out[xyi * VMN0348HGRO2 + ii] = make_int2(__double2loint(temp2),__double2hiint(temp2)); temp = temp2; } } }  template<typename T> __global__ void VNLJBN304IORNFK9023JOVKSLX(T* _____XCV, int VMN0348HGRO2, int N) { int idx = threadIdx.x + blockIdx.x * blockDim.x; if(idx < N) { int CSVNKLDNFGDNFQ = idx * VMN0348HGRO2; for(int ii = 1; ii < VMN0348HGRO2; ++ii) { _____XCV[CSVNKLDNFGDNFQ + ii] = _____XCV[CSVNKLDNFGDNFQ + ii] + _____XCV[CSVNKLDNFGDNFQ + ii - 1]; } } }   __global__ void VBDKL9304URGJFIDKAS12(float* _____XCV, int CVNKLJFVN2390XZNKLS0RE34QRGFEDFS, int ASD23MZNCDS23890I, int ZXMCKLNAESD2038EIWONVF) { int idv = threadIdx.x + blockIdx.x * blockDim.x; int pIdx = threadIdx.y + blockIdx.y * blockDim.y; if (idv < ASD23MZNCDS23890I && pIdx < ZXMCKLNAESD2038EIWONVF) { int ZXCVBNJASDFWasDF = pIdx * CVNKLJFVN2390XZNKLS0RE34QRGFEDFS * ASD23MZNCDS23890I + idv; for(int ii = 1; ii < CVNKLJFVN2390XZNKLS0RE34QRGFEDFS; ++ii) { _____XCV[ZXCVBNJASDFWasDF + ii * ASD23MZNCDS23890I] = _____XCV[ZXCVBNJASDFWasDF + ii * ASD23MZNCDS23890I] + _____XCV[ZXCVBNJASDFWasDF + (ii - 1) * ASD23MZNCDS23890I]; } } }   void ______XCNV9340KL9340KFDL(float* hVNNR03ASDQ234RA___, thrust::device_vector<float>& ZXY, thrust::device_vector<float>& ZYX, int CMNOI4BH3958BTUJ23, int QAIWLRUW4W, int VMN0348HGRO2) {  const int siz = CMNOI4BH3958BTUJ23 * QAIWLRUW4W * VMN0348HGRO2; const int nsiz_ZXY = (VMN0348HGRO2 + 1) * (CMNOI4BH3958BTUJ23 + 1) * QAIWLRUW4W; const int nsiz_ZYX = (VMN0348HGRO2 + 1) * (QAIWLRUW4W + 1) * CMNOI4BH3958BTUJ23; ZXY.resize(nsiz_ZXY); ZYX.resize(nsiz_ZYX); thrust::device_vector<float> VNNR03ASDQ234RA___(hVNNR03ASDQ234RA___,hVNNR03ASDQ234RA___ + siz);  dim3 KLCDNFKVG038Q4OHINGF34(64,16,1); dim3 KSLJNV830Q49EZSDKLNP2Q3( (VMN0348HGRO2 + KLCDNFKVG038Q4OHINGF34.x - 1) / KLCDNFKVG038Q4OHINGF34.x, (CMNOI4BH3958BTUJ23 + KLCDNFKVG038Q4OHINGF34.y - 1) / KLCDNFKVG038Q4OHINGF34.y, (QAIWLRUW4W + KLCDNFKVG038Q4OHINGF34.z - 1) / KLCDNFKVG038Q4OHINGF34.z);  NKCMVN934Q0UFK9340Q345<<<KSLJNV830Q49EZSDKLNP2Q3,KLCDNFKVG038Q4OHINGF34>>>(thrust::raw_pointer_cast(&VNNR03ASDQ234RA___[0]), thrust::raw_pointer_cast(&ZXY[0]), thrust::raw_pointer_cast(&ZYX[0]), CMNOI4BH3958BTUJ23, QAIWLRUW4W, VMN0348HGRO2); VNNR03ASDQ234RA___.clear();  const int nVMN0348HGRO2 = VMN0348HGRO2 + 1; const int nCMNOI4BH3958BTUJ23 = CMNOI4BH3958BTUJ23 + 1; const int nQAIWLRUW4W = QAIWLRUW4W + 1;   KLCDNFKVG038Q4OHINGF34.x = 32; KLCDNFKVG038Q4OHINGF34.y = 1; KLCDNFKVG038Q4OHINGF34.z = 1; KSLJNV830Q49EZSDKLNP2Q3.x = (nCMNOI4BH3958BTUJ23 * QAIWLRUW4W + KLCDNFKVG038Q4OHINGF34.x - 1) / KLCDNFKVG038Q4OHINGF34.x; KSLJNV830Q49EZSDKLNP2Q3.y = 1; KSLJNV830Q49EZSDKLNP2Q3.z = 1; VNLJBN304IORNFK9023JOVKSLX<<<KSLJNV830Q49EZSDKLNP2Q3,KLCDNFKVG038Q4OHINGF34>>>(thrust::raw_pointer_cast(&ZXY[0]), nVMN0348HGRO2, nCMNOI4BH3958BTUJ23 * QAIWLRUW4W);  KLCDNFKVG038Q4OHINGF34.x = 64; KLCDNFKVG038Q4OHINGF34.y = 16; KLCDNFKVG038Q4OHINGF34.z = 1; KSLJNV830Q49EZSDKLNP2Q3.x = (nVMN0348HGRO2 + KLCDNFKVG038Q4OHINGF34.x - 1) / KLCDNFKVG038Q4OHINGF34.x; KSLJNV830Q49EZSDKLNP2Q3.y = (QAIWLRUW4W + KLCDNFKVG038Q4OHINGF34.y - 1) / KLCDNFKVG038Q4OHINGF34.y; KSLJNV830Q49EZSDKLNP2Q3.z = 1; VBDKL9304URGJFIDKAS12<<<KSLJNV830Q49EZSDKLNP2Q3,KLCDNFKVG038Q4OHINGF34>>>(thrust::raw_pointer_cast(&ZXY[0]), nCMNOI4BH3958BTUJ23, nVMN0348HGRO2, QAIWLRUW4W);  KLCDNFKVG038Q4OHINGF34.x = 32; KLCDNFKVG038Q4OHINGF34.y = 1; KLCDNFKVG038Q4OHINGF34.z = 1; KSLJNV830Q49EZSDKLNP2Q3.x = (nQAIWLRUW4W * CMNOI4BH3958BTUJ23 + KLCDNFKVG038Q4OHINGF34.x - 1) / KLCDNFKVG038Q4OHINGF34.x; KSLJNV830Q49EZSDKLNP2Q3.y = 1; KSLJNV830Q49EZSDKLNP2Q3.z = 1; VNLJBN304IORNFK9023JOVKSLX<<<KSLJNV830Q49EZSDKLNP2Q3,KLCDNFKVG038Q4OHINGF34>>>(thrust::raw_pointer_cast(&ZYX[0]), nVMN0348HGRO2, nQAIWLRUW4W * CMNOI4BH3958BTUJ23);  KLCDNFKVG038Q4OHINGF34.x = 64; KLCDNFKVG038Q4OHINGF34.y = 16; KLCDNFKVG038Q4OHINGF34.z = 1; KSLJNV830Q49EZSDKLNP2Q3.x = (nVMN0348HGRO2 + KLCDNFKVG038Q4OHINGF34.x - 1) / KLCDNFKVG038Q4OHINGF34.x; KSLJNV830Q49EZSDKLNP2Q3.y = (CMNOI4BH3958BTUJ23 + KLCDNFKVG038Q4OHINGF34.y - 1) / KLCDNFKVG038Q4OHINGF34.y; KSLJNV830Q49EZSDKLNP2Q3.z = 1; VBDKL9304URGJFIDKAS12<<<KSLJNV830Q49EZSDKLNP2Q3,KLCDNFKVG038Q4OHINGF34>>>(thrust::raw_pointer_cast(&ZYX[0]), nQAIWLRUW4W, nVMN0348HGRO2, CMNOI4BH3958BTUJ23); }    template<typename T> void XCNVXCVA4ERHN3840EIOGNKFNASDFLJ( cudaTextureObject_t& texObj,  cudaArray* d______XCVArray,  int VNIRONV84WOHIDNSASDKL8934, int QWEIOQUWOISDKLJ23, int BCVMNREJDFK42W35, T* SDKLHFW9024U3TRJPIF,  cudaMemcpyKind VW34, cudaTextureAddressMode addressMode, cudaTextureFilterMode textureFilterMode,  cudaTextureReadMode textureReadMode,  bool isNormalized)  { cudaExtent _____XCVSize; _____XCVSize.width = VNIRONV84WOHIDNSASDKL8934; _____XCVSize.height = QWEIOQUWOISDKLJ23; _____XCVSize.depth = BCVMNREJDFK42W35; cudaChannelFormatDesc channelDesc = cudaCreateChannelDesc<T>(); cudaMalloc3DArray(&d______XCVArray, &channelDesc, _____XCVSize); cudaMemcpy3DParms copyParams = {0}; copyParams.srcPtr = make_cudaPitchedPtr( (void*)SDKLHFW9024U3TRJPIF, _____XCVSize.width * sizeof(T), _____XCVSize.width, _____XCVSize.height); copyParams.dstArray = d______XCVArray; copyParams.extent = _____XCVSize; copyParams.kind = VW34; cudaMemcpy3D(&copyParams); cudaResourceDesc resDesc; memset(&resDesc, 0, sizeof(resDesc)); resDesc.resType = cudaResourceTypeArray; resDesc.res.array.array = d______XCVArray; cudaTextureDesc texDesc; memset(&texDesc, 0, sizeof(texDesc)); texDesc.addressMode[0] = addressMode; texDesc.addressMode[1] = addressMode; texDesc.addressMode[2] = addressMode; texDesc.filterMode = textureFilterMode; texDesc.readMode = textureReadMode;  texDesc.normalizedCoords = isNormalized; CUDA_SAFE_CALL(cudaCreateTextureObject(&texObj, &resDesc, &texDesc,nullptr)); }   void VNSDKJFN0834HSDFHKJSDHF(cudaTextureObject_t& texObj, cudaArray* d_array) { cudaDestroyTextureObject(texObj); cudaFreeArray(d_array); }      __global__ void ________A( cudaTextureObject_t VNNR03ASDQ234RA___Tex1, cudaTextureObject_t VNNR03ASDQ234RA___Tex2, double* proj,  double3 s,  const double3* __restrict cossinZT,  const double* __restrict xds,   const double* __restrict yds,   const double* __restrict zds,   const double* __restrict bxds, const double* __restrict byds, const double* __restrict bzds,  double3 objCntIdx,  double dx, double dz, int CMNOI4BH3958BTUJ23, int QAIWLRUW4W,  int CVNKLJFVN2390XZNKLS0RE34QRGFEDFS, int ASD23MZNCDS23890I,  int ZXMCKLNAESD2038EIWONVF)  { int detIdV = threadIdx.x + blockIdx.x * blockDim.x; int detIdU = threadIdx.y + blockIdx.y * blockDim.y; int angIdx = threadIdx.z + blockIdx.z * blockDim.z;  __shared__ double _xds[KLZSDHNQ04JAIO]; __shared__ double _yds[KLZSDHNQ04JAIO]; _xds[threadIdx.y] = xds[detIdU]; _yds[threadIdx.y] = yds[detIdU]; __syncthreads();  if(detIdU < CVNKLJFVN2390XZNKLS0RE34QRGFEDFS && detIdV < ASD23MZNCDS23890I && angIdx < ZXMCKLNAESD2038EIWONVF) { double3 dir = cossinZT[angIdx]; double3 cursour = make_double3( s.x * dir.x - s.y * dir.y, s.x * dir.y + s.y * dir.x, s.z + dir.z); s = cossinZT[angIdx]; double summ = _xds[threadIdx.y] * s.x - _yds[threadIdx.y] * s.y; double obj = _xds[threadIdx.y] * s.y + _yds[threadIdx.y] * s.x; double realL = bxds[detIdU]; double realR = byds[detIdU]; double realU = bxds[detIdU + 1]; double realD = byds[detIdU + 1]; double2 curDetL = make_double2( realL * s.x - realR * s.y, realL * s.y + realR * s.x);  double2 curDetR = make_double2( realU * s.x - realD * s.y, realU * s.y + realD * s.x); double4 curDet = make_double4(summ,obj,bzds[detIdV] + s.z,bzds[detIdV+1] + s.z);   dir = normalize(make_double3( summ, obj, zds[detIdV] + s.z) - cursour);  summ = 0; obj = 0;   double intersectLength, intersectQWEIOQUWOISDKLJ23; double invdz = 1.0 / dz; double invdx = 1.0 / dx;   double factL(1.0f); double factR(1.0f); double factU(1.0f); double factD(1.0f); double constVal = 0;  int crealD, crealR, crealU, crealL; int frealD, frealR, frealU, frealL;  if(abs(s.x) <= abs(s.y)) { summ = 0;  factL = (curDetL.y - cursour.y) / (curDetL.x - cursour.x); factR = (curDetR.y - cursour.y) / (curDetR.x - cursour.x); factU = (curDet.w - cursour.z) / (curDet.x - cursour.x); factD = (curDet.z - cursour.z) / (curDet.x - cursour.x);  constVal = dx * dx * dz / (abs(dir.x)); 
#pragma unroll 
for(int ii = 0; ii < CMNOI4BH3958BTUJ23; ii++) { obj = (ii - objCntIdx.x) * dx;  realL = (obj - curDetL.x) * factL + curDetL.y; realR = (obj - curDetR.x) * factR + curDetR.y; realU = (obj - curDet.x) * factU + curDet.w; realD = (obj - curDet.x) * factD + curDet.z;  intersectLength = realR - realL; intersectQWEIOQUWOISDKLJ23 = realU - realD;   realD = realD * invdz + objCntIdx.z + 1; realR = realR * invdx + objCntIdx.y + 1; realU = realU * invdz + objCntIdx.z + 1; realL = realL * invdx + objCntIdx.y + 1;  crealD = ceil(realD); crealR = ceil(realR); crealU = ceil(realU); crealL = ceil(realL);  frealD = floor(realD); frealR = floor(realR); frealU = floor(realU); frealL = floor(realL);   summ += (bilerp( tex3D<int2>(VNNR03ASDQ234RA___Tex2, frealD, frealL, ii + 0.5), tex3D<int2>(VNNR03ASDQ234RA___Tex2, frealD, crealL, ii + 0.5), tex3D<int2>(VNNR03ASDQ234RA___Tex2, crealD, frealL, ii + 0.5), tex3D<int2>(VNNR03ASDQ234RA___Tex2, crealD, crealL, ii + 0.5), realL - frealL,realD - frealD) + bilerp( tex3D<int2>(VNNR03ASDQ234RA___Tex2, frealU, frealR, ii + 0.5), tex3D<int2>(VNNR03ASDQ234RA___Tex2, frealU, crealR, ii + 0.5), tex3D<int2>(VNNR03ASDQ234RA___Tex2, crealU, frealR, ii + 0.5), tex3D<int2>(VNNR03ASDQ234RA___Tex2, crealU, crealR, ii + 0.5), realR - frealR,realU - frealU) - bilerp( tex3D<int2>(VNNR03ASDQ234RA___Tex2, frealD, frealR, ii + 0.5), tex3D<int2>(VNNR03ASDQ234RA___Tex2, frealD, crealR, ii + 0.5), tex3D<int2>(VNNR03ASDQ234RA___Tex2, crealD, frealR, ii + 0.5), tex3D<int2>(VNNR03ASDQ234RA___Tex2, crealD, crealR, ii + 0.5), realR - frealR,realD - frealD) - bilerp( tex3D<int2>(VNNR03ASDQ234RA___Tex2, frealU, frealL, ii + 0.5), tex3D<int2>(VNNR03ASDQ234RA___Tex2, frealU, crealL, ii + 0.5), tex3D<int2>(VNNR03ASDQ234RA___Tex2, crealU, frealL, ii + 0.5), tex3D<int2>(VNNR03ASDQ234RA___Tex2, crealU, crealL, ii + 0.5), realL - frealL,realU - frealU))/ (intersectLength * intersectQWEIOQUWOISDKLJ23); } __syncthreads(); proj[(angIdx * CVNKLJFVN2390XZNKLS0RE34QRGFEDFS + detIdU) * ASD23MZNCDS23890I + detIdV] = summ * constVal; } else { summ = 0;  factL = (curDetL.x - cursour.x) / (curDetL.y - cursour.y); factR = (curDetR.x - cursour.x) / (curDetR.y - cursour.y); factU = (curDet.w - cursour.z) / (curDet.y - cursour.y); factD = (curDet.z - cursour.z) / (curDet.y - cursour.y); constVal = dx * dx * dz / (abs(dir.y)); 
#pragma unroll 
for(int jj = 0; jj < QAIWLRUW4W; jj++) { obj = (jj - objCntIdx.y) * dx; realL = (obj - curDetL.y) * factL + curDetL.x; realR = (obj - curDetR.y) * factR + curDetR.x; realU = (obj - curDet.y) * factU + curDet.w; realD = (obj - curDet.y) * factD + curDet.z;  intersectLength = realR - realL; intersectQWEIOQUWOISDKLJ23 = realU - realD;  realD = realD * invdz + objCntIdx.z + 1; realR = realR * invdx + objCntIdx.x + 1; realU = realU * invdz + objCntIdx.z + 1; realL = realL * invdx + objCntIdx.x + 1;   crealD = ceil(realD); crealR = ceil(realR); crealU = ceil(realU); crealL = ceil(realL);  frealD = floor(realD); frealR = floor(realR); frealU = floor(realU); frealL = floor(realL);  summ += (bilerp( tex3D<int2>(VNNR03ASDQ234RA___Tex1, frealD, frealL, jj + 0.5), tex3D<int2>(VNNR03ASDQ234RA___Tex1, frealD, crealL, jj + 0.5), tex3D<int2>(VNNR03ASDQ234RA___Tex1, crealD, frealL, jj + 0.5), tex3D<int2>(VNNR03ASDQ234RA___Tex1, crealD, crealL, jj + 0.5), realL - frealL,realD - frealD) + bilerp( tex3D<int2>(VNNR03ASDQ234RA___Tex1, frealU, frealR, jj + 0.5), tex3D<int2>(VNNR03ASDQ234RA___Tex1, frealU, crealR, jj + 0.5), tex3D<int2>(VNNR03ASDQ234RA___Tex1, crealU, frealR, jj + 0.5), tex3D<int2>(VNNR03ASDQ234RA___Tex1, crealU, crealR, jj + 0.5), realR - frealR,realU - frealU) - bilerp( tex3D<int2>(VNNR03ASDQ234RA___Tex1, frealD, frealR, jj + 0.5), tex3D<int2>(VNNR03ASDQ234RA___Tex1, frealD, crealR, jj + 0.5), tex3D<int2>(VNNR03ASDQ234RA___Tex1, crealD, frealR, jj + 0.5), tex3D<int2>(VNNR03ASDQ234RA___Tex1, crealD, crealR, jj + 0.5), realR - frealR,realD - frealD) - bilerp( tex3D<int2>(VNNR03ASDQ234RA___Tex1, frealU, frealL, jj + 0.5), tex3D<int2>(VNNR03ASDQ234RA___Tex1, frealU, crealL, jj + 0.5), tex3D<int2>(VNNR03ASDQ234RA___Tex1, crealU, frealL, jj + 0.5), tex3D<int2>(VNNR03ASDQ234RA___Tex1, crealU, crealL, jj + 0.5), realL - frealL,realU - frealU)) / (intersectLength * intersectQWEIOQUWOISDKLJ23);  } __syncthreads(); proj[(angIdx * CVNKLJFVN2390XZNKLS0RE34QRGFEDFS + detIdU) * ASD23MZNCDS23890I + detIdV] = summ * constVal; }  } }   void DD3_gpu_proj_doubleprecisionbranchless( float x0, float y0, float z0, int CVNKLJFVN2390XZNKLS0RE34QRGFEDFS, int ASD23MZNCDS23890I, float* xds, float* yds, float* zds, float imgXCenter, float imgYCenter, float imgZCenter, float* hangs, float* hzPos, int ZXMCKLNAESD2038EIWONVF, int CMNOI4BH3958BTUJ23, int QAIWLRUW4W, int VMN0348HGRO2, float* VNNR03ASDQ234RA___, float* h_____XCV, float dx, float dz, byte* mask, int gpunum) {  for(int ii = 0; ii != CMNOI4BH3958BTUJ23 * QAIWLRUW4W; ++ii) { byte v = mask[ii]; for(int jj = 0; jj != VMN0348HGRO2; ++jj) { VNNR03ASDQ234RA___[ii * VMN0348HGRO2 + jj] = VNNR03ASDQ234RA___[ii * VMN0348HGRO2 + jj] * v; } }  float* bxds = new float[CVNKLJFVN2390XZNKLS0RE34QRGFEDFS + 1]; float* byds = new float[CVNKLJFVN2390XZNKLS0RE34QRGFEDFS + 1]; float* bzds = new float[ASD23MZNCDS23890I + 1]; DD3Boundaries(CVNKLJFVN2390XZNKLS0RE34QRGFEDFS + 1, xds, bxds); DD3Boundaries(CVNKLJFVN2390XZNKLS0RE34QRGFEDFS + 1, yds, byds); DD3Boundaries(ASD23MZNCDS23890I + 1, zds, bzds);  CUDA_SAFE_CALL(cudaSetDevice(gpunum)); CUDA_SAFE_CALL(cudaDeviceReset());  cudaStream_t streams[4]; CUDA_SAFE_CALL(cudaStreamCreate(&streams[0])); CUDA_SAFE_CALL(cudaStreamCreate(&streams[1])); CUDA_SAFE_CALL(cudaStreamCreate(&streams[2])); CUDA_SAFE_CALL(cudaStreamCreate(&streams[3]));  int TOTVN = CMNOI4BH3958BTUJ23 * QAIWLRUW4W * VMN0348HGRO2; double objCntIdxX = (CMNOI4BH3958BTUJ23 - 1.0) * 0.5 - imgXCenter / dx; double objCntIdxY = (QAIWLRUW4W - 1.0) * 0.5 - imgYCenter / dx; double objCntIdxZ = (VMN0348HGRO2 - 1.0) * 0.5 - imgZCenter / dz;  thrust::device_vector<float> in(VNNR03ASDQ234RA___, VNNR03ASDQ234RA___ + TOTVN); thrust::device_vector<double> MCVBKLNFGEO7UDNK92034((VMN0348HGRO2 + 1) * (CMNOI4BH3958BTUJ23 + 1) * QAIWLRUW4W, 0);  thrust::device_vector<double> in_ZYX((VMN0348HGRO2 + 1) * (QAIWLRUW4W + 1) * CMNOI4BH3958BTUJ23, 0);   dim3 KLCDNFKVG038Q4OHINGF34(64,16,1); dim3 KSLJNV830Q49EZSDKLNP2Q3( (VMN0348HGRO2 + KLCDNFKVG038Q4OHINGF34.x - 1) / KLCDNFKVG038Q4OHINGF34.x, (CMNOI4BH3958BTUJ23 + KLCDNFKVG038Q4OHINGF34.y - 1) / KLCDNFKVG038Q4OHINGF34.y, (QAIWLRUW4W + KLCDNFKVG038Q4OHINGF34.z - 1) / KLCDNFKVG038Q4OHINGF34.z);  NKCMVN934Q0UFK9340Q345<float,double><<<KSLJNV830Q49EZSDKLNP2Q3,KLCDNFKVG038Q4OHINGF34>>>( thrust::raw_pointer_cast(&in[0]), thrust::raw_pointer_cast(&MCVBKLNFGEO7UDNK92034[0]), thrust::raw_pointer_cast(&in_ZYX[0]), CMNOI4BH3958BTUJ23, QAIWLRUW4W, VMN0348HGRO2); in.clear();  thrust::device_vector<double> MCVBKLNFGEO7UDNK92034_summ1((VMN0348HGRO2 + 1) * (CMNOI4BH3958BTUJ23 + 1) * QAIWLRUW4W,0); thrust::device_vector<int2> MCVBKLNFGEO7UDNK92034_summ((VMN0348HGRO2 + 1) * (CMNOI4BH3958BTUJ23 + 1) * QAIWLRUW4W);   KLCDNFKVG038Q4OHINGF34.x = 64;KLCDNFKVG038Q4OHINGF34.y = 1;KLCDNFKVG038Q4OHINGF34.z = 1; KSLJNV830Q49EZSDKLNP2Q3.x = (VMN0348HGRO2 + KLCDNFKVG038Q4OHINGF34.x) / KLCDNFKVG038Q4OHINGF34.x;KSLJNV830Q49EZSDKLNP2Q3.y = 1;KSLJNV830Q49EZSDKLNP2Q3.z = 1;  dim3 KLCDNFKVG038Q4OHINGF342(64); dim3 KSLJNV830Q49EZSDKLNP2Q32((QAIWLRUW4W + KLCDNFKVG038Q4OHINGF342.x) / KLCDNFKVG038Q4OHINGF342.x); dim3 KLCDNFKVG038Q4OHINGF343(64); dim3 KSLJNV830Q49EZSDKLNP2Q33((CMNOI4BH3958BTUJ23 + KLCDNFKVG038Q4OHINGF343.x) / KLCDNFKVG038Q4OHINGF343.x);   for(int jj = 0; jj != QAIWLRUW4W; ++jj) { CVNOU3H4409IJIFEASD12<<<KSLJNV830Q49EZSDKLNP2Q3,KLCDNFKVG038Q4OHINGF34,0,streams[0]>>>( thrust::raw_pointer_cast(&MCVBKLNFGEO7UDNK92034[0]) + jj * (VMN0348HGRO2 + 1) * (CMNOI4BH3958BTUJ23 + 1), thrust::raw_pointer_cast(&MCVBKLNFGEO7UDNK92034_summ1[0]) + jj * (VMN0348HGRO2 + 1) * (CMNOI4BH3958BTUJ23 + 1), CMNOI4BH3958BTUJ23 + 1, VMN0348HGRO2 + 1); DSKLVN083Q4HIRKSKDLHNF89WHEF<<<KSLJNV830Q49EZSDKLNP2Q32,KLCDNFKVG038Q4OHINGF342,0,streams[0]>>>( thrust::raw_pointer_cast(&MCVBKLNFGEO7UDNK92034_summ1[0]) + jj * (VMN0348HGRO2 + 1) * (CMNOI4BH3958BTUJ23 + 1), thrust::raw_pointer_cast(&MCVBKLNFGEO7UDNK92034_summ[0]) + jj * (VMN0348HGRO2 + 1) * (CMNOI4BH3958BTUJ23 + 1), CMNOI4BH3958BTUJ23 + 1, VMN0348HGRO2 + 1); } MCVBKLNFGEO7UDNK92034.clear(); MCVBKLNFGEO7UDNK92034_summ1.clear();   cudaArray* d_VNNR03ASDQ234RA___umeArray1 = nullptr; cudaTextureObject_t texObj1;  XCNVXCVA4ERHN3840EIOGNKFNASDFLJ<int2>(texObj1, d_VNNR03ASDQ234RA___umeArray1,VMN0348HGRO2 + 1, CMNOI4BH3958BTUJ23+1,QAIWLRUW4W, thrust::raw_pointer_cast(&MCVBKLNFGEO7UDNK92034_summ[0]), cudaMemcpyDeviceToDevice, cudaAddressModeClamp,cudaFilterModePoint, cudaReadModeElementType,false); MCVBKLNFGEO7UDNK92034_summ.clear();       thrust::device_vector<double> in_ZYX_summ1((VMN0348HGRO2 + 1) * (QAIWLRUW4W + 1) * CMNOI4BH3958BTUJ23, 0);  thrust::device_vector<int2> in_ZYX_summ((VMN0348HGRO2 + 1) * (QAIWLRUW4W + 1) * CMNOI4BH3958BTUJ23);  for(int ii = 0; ii != CMNOI4BH3958BTUJ23; ++ii) {  CVNOU3H4409IJIFEASD12<<<KSLJNV830Q49EZSDKLNP2Q3,KLCDNFKVG038Q4OHINGF34,0,streams[1]>>>( thrust::raw_pointer_cast(&in_ZYX[0]) + ii * (VMN0348HGRO2 + 1) * (QAIWLRUW4W + 1), thrust::raw_pointer_cast(&in_ZYX_summ1[0]) + ii * (VMN0348HGRO2 + 1) * (QAIWLRUW4W + 1), QAIWLRUW4W + 1, VMN0348HGRO2 + 1); DSKLVN083Q4HIRKSKDLHNF89WHEF<<<KSLJNV830Q49EZSDKLNP2Q33,KLCDNFKVG038Q4OHINGF343,0,streams[1]>>>( thrust::raw_pointer_cast(&in_ZYX_summ1[0]) + ii * (VMN0348HGRO2 + 1) * (QAIWLRUW4W + 1), thrust::raw_pointer_cast(&in_ZYX_summ[0]) + ii * (VMN0348HGRO2 + 1) * (QAIWLRUW4W + 1), QAIWLRUW4W + 1, VMN0348HGRO2 + 1); } in_ZYX.clear(); in_ZYX_summ1.clear();  cudaArray* d_VNNR03ASDQ234RA___umeArray2 = nullptr; cudaTextureObject_t texObj2;  XCNVXCVA4ERHN3840EIOGNKFNASDFLJ<int2>(texObj2, d_VNNR03ASDQ234RA___umeArray2,VMN0348HGRO2 + 1, QAIWLRUW4W+1,CMNOI4BH3958BTUJ23, thrust::raw_pointer_cast(&in_ZYX_summ[0]), cudaMemcpyDeviceToDevice, cudaAddressModeClamp,cudaFilterModePoint, cudaReadModeElementType,false); in_ZYX_summ.clear();  thrust::device_vector<double> _____XCV(CVNKLJFVN2390XZNKLS0RE34QRGFEDFS * ASD23MZNCDS23890I * ZXMCKLNAESD2038EIWONVF, 0); thrust::device_vector<double> angs(hangs, hangs + ZXMCKLNAESD2038EIWONVF); thrust::device_vector<double> zPos(hzPos, hzPos + ZXMCKLNAESD2038EIWONVF); thrust::device_vector<double> d_xds(xds, xds + CVNKLJFVN2390XZNKLS0RE34QRGFEDFS); thrust::device_vector<double> d_yds(yds, yds + CVNKLJFVN2390XZNKLS0RE34QRGFEDFS); thrust::device_vector<double> d_zds(zds, zds + ASD23MZNCDS23890I); thrust::device_vector<double> d_bxds(bxds, bxds + CVNKLJFVN2390XZNKLS0RE34QRGFEDFS + 1); thrust::device_vector<double> d_byds(byds, byds + CVNKLJFVN2390XZNKLS0RE34QRGFEDFS + 1); thrust::device_vector<double> d_bzds(bzds, bzds + ASD23MZNCDS23890I + 1);   thrust::device_vector<double3> cossinZT(ZXMCKLNAESD2038EIWONVF); thrust::transform( thrust::make_zip_iterator(thrust::make_tuple(angs.begin(),zPos.begin())), thrust::make_zip_iterator(thrust::make_tuple(angs.end(),zPos.end())), cossinZT.begin(),CTMBIR::ConstantForBackProjection<double>(x0,y0,z0));  dim3 KLCDNFKVG038Q4OHINGF34c(64,16,1); dim3 KSLJNV830Q49EZSDKLNP2Q3c( (ASD23MZNCDS23890I + KLCDNFKVG038Q4OHINGF34c.x) / KLCDNFKVG038Q4OHINGF34c.x, (CVNKLJFVN2390XZNKLS0RE34QRGFEDFS + KLCDNFKVG038Q4OHINGF34c.y) / KLCDNFKVG038Q4OHINGF34c.y, (ZXMCKLNAESD2038EIWONVF + KLCDNFKVG038Q4OHINGF34c.z - 1) / KLCDNFKVG038Q4OHINGF34c.z);  KLCDNFKVG038Q4OHINGF34.x = VAMDSN3409UOJIFK;  KLCDNFKVG038Q4OHINGF34.y = KLZSDHNQ04JAIO; KLCDNFKVG038Q4OHINGF34.z = SKLJDFNGHW9835GJK35TG;  KSLJNV830Q49EZSDKLNP2Q3.x = (ASD23MZNCDS23890I + KLCDNFKVG038Q4OHINGF34.x - 1) / KLCDNFKVG038Q4OHINGF34.x; KSLJNV830Q49EZSDKLNP2Q3.y = (CVNKLJFVN2390XZNKLS0RE34QRGFEDFS + KLCDNFKVG038Q4OHINGF34.y - 1) / KLCDNFKVG038Q4OHINGF34.y; KSLJNV830Q49EZSDKLNP2Q3.z = (ZXMCKLNAESD2038EIWONVF + KLCDNFKVG038Q4OHINGF34.z - 1) / KLCDNFKVG038Q4OHINGF34.z;  ________A<<<KSLJNV830Q49EZSDKLNP2Q3,KLCDNFKVG038Q4OHINGF34>>>(texObj1,texObj2, thrust::raw_pointer_cast(&_____XCV[0]),make_double3(x0,y0,z0), thrust::raw_pointer_cast(&cossinZT[0]), thrust::raw_pointer_cast(&d_xds[0]), thrust::raw_pointer_cast(&d_yds[0]), thrust::raw_pointer_cast(&d_zds[0]), thrust::raw_pointer_cast(&d_bxds[0]), thrust::raw_pointer_cast(&d_byds[0]), thrust::raw_pointer_cast(&d_bzds[0]), make_double3(objCntIdxX, objCntIdxY,objCntIdxZ), dx, dz, CMNOI4BH3958BTUJ23, QAIWLRUW4W, CVNKLJFVN2390XZNKLS0RE34QRGFEDFS, ASD23MZNCDS23890I, ZXMCKLNAESD2038EIWONVF); thrust::copy(_____XCV.begin(),_____XCV.end(),h_____XCV);  CUDA_SAFE_CALL(cudaDestroyTextureObject(texObj1)); CUDA_SAFE_CALL(cudaDestroyTextureObject(texObj2));  VNSDKJFN0834HSDFHKJSDHF(texObj1, d_VNNR03ASDQ234RA___umeArray1); VNSDKJFN0834HSDFHKJSDHF(texObj2, d_VNNR03ASDQ234RA___umeArray2); _____XCV.clear(); angs.clear(); zPos.clear();  d_xds.clear(); d_yds.clear(); d_zds.clear(); d_bxds.clear(); d_byds.clear(); d_bzds.clear();   delete[] bxds; delete[] byds; delete[] bzds; }   __global__ void ZCNKLXDVN3084ORHINJK9Q304UTIGNFK( cudaTextureObject_t VNNR03ASDQ234RA___Tex, float* proj, float3 s, float*  d_xds, float*  d_yds, float*  d_zds, float3* cossinT, float3 objCntIdx, float dx, float dz, int CMNOI4BH3958BTUJ23, int QAIWLRUW4W, int CVNKLJFVN2390XZNKLS0RE34QRGFEDFS, int ASD23MZNCDS23890I, int ZXMCKLNAESD2038EIWONVF) { int detIdV = threadIdx.x + blockIdx.x * blockDim.x; int detIdU = threadIdx.y + blockIdx.y * blockDim.y; int angIdx = threadIdx.z + blockIdx.z * blockDim.z; if(detIdV < ASD23MZNCDS23890I && detIdU < CVNKLJFVN2390XZNKLS0RE34QRGFEDFS && angIdx < ZXMCKLNAESD2038EIWONVF) {  float3 cossin = cossinT[angIdx]; float3 cursour = make_float3( s.x * cossin.x - s.y * cossin.y, s.x * cossin.y + s.y * cossin.x, s.z + cossin.z); float summ = d_xds[detIdU]; float obj = d_yds[detIdU]; float idx = d_zds[detIdV];   float3 curDet = make_float3( summ * cossin.x - obj * cossin.y, summ * cossin.y + obj * cossin.x, idx + cossin.z); float3 dir = normalize(curDet - cursour); summ = 0; obj = 0; float idxZ;  if(fabsf(cossin.x) <= fabsf(cossin.y)) { summ = 0;  for(int ii = 0; ii < CMNOI4BH3958BTUJ23; ++ii) { obj = (ii - objCntIdx.x) * dx; idx = (obj - curDet.x) / dir.x * dir.y + curDet.y; idxZ = (obj - curDet.x) / dir.x * dir.z + curDet.z; idx = idx / dx + objCntIdx.y + 0.5; idxZ = idxZ / dz + objCntIdx.z + 0.5; summ += tex3D<float>(VNNR03ASDQ234RA___Tex, idxZ, ii + 0.5f, idx); } __syncthreads(); proj[(angIdx * CVNKLJFVN2390XZNKLS0RE34QRGFEDFS + detIdU) * ASD23MZNCDS23890I + detIdV] = summ * dx / fabsf(dir.x); } else { summ = 0;  for(int jj = 0; jj < QAIWLRUW4W; ++jj) { obj = (jj - objCntIdx.y) * dx; idx = (obj - curDet.y) / dir.y * dir.x + curDet.x; idxZ = (obj - curDet.y) / dir.y * dir.z + curDet.z; idx = idx / dx + objCntIdx.x + 0.5; idxZ = idxZ / dz + objCntIdx.z + 0.5; summ += tex3D<float>(VNNR03ASDQ234RA___Tex, idxZ, idx, jj + 0.5f);  } __syncthreads(); proj[(angIdx * CVNKLJFVN2390XZNKLS0RE34QRGFEDFS + detIdU) * ASD23MZNCDS23890I + detIdV] = summ * dx / fabsf(dir.y); } } }   void ______XCKMVN840WNJK9Q02HJIFKS( float x0, float y0, float z0, int CVNKLJFVN2390XZNKLS0RE34QRGFEDFS, int ASD23MZNCDS23890I, float* xds, float* yds, float* zds, float imgXCenter, float imgYCenter, float imgZCenter, float* hangs, float* hzPos, int ZXMCKLNAESD2038EIWONVF, int CMNOI4BH3958BTUJ23, int QAIWLRUW4W, int VMN0348HGRO2, float* hVNNR03ASDQ234RA___, float* h_____XCV, float dx, float dz, byte* mask, int gpunum) { for(int ii = 0; ii != CMNOI4BH3958BTUJ23 * QAIWLRUW4W; ++ii) { byte v = mask[ii]; for(int jj = 0; jj != VMN0348HGRO2; ++jj) { hVNNR03ASDQ234RA___[ii * VMN0348HGRO2 + jj] = hVNNR03ASDQ234RA___[ii * VMN0348HGRO2 + jj] * v; } }  float* bxds = new float[CVNKLJFVN2390XZNKLS0RE34QRGFEDFS + 1]; float* byds = new float[CVNKLJFVN2390XZNKLS0RE34QRGFEDFS + 1]; float* bzds = new float[ASD23MZNCDS23890I + 1]; DD3Boundaries(CVNKLJFVN2390XZNKLS0RE34QRGFEDFS + 1, xds, bxds); DD3Boundaries(CVNKLJFVN2390XZNKLS0RE34QRGFEDFS + 1, yds, byds); DD3Boundaries(ASD23MZNCDS23890I + 1, zds, bzds);  CUDA_SAFE_CALL(cudaSetDevice(gpunum)); CUDA_SAFE_CALL(cudaDeviceReset());  const int TOTVN = CMNOI4BH3958BTUJ23 * QAIWLRUW4W * VMN0348HGRO2; float objCntIdxX = (CMNOI4BH3958BTUJ23 - 1.0) * 0.5 - imgXCenter / dx; float objCntIdxY = (QAIWLRUW4W - 1.0) * 0.5 - imgYCenter / dx; float objCntIdxZ = (VMN0348HGRO2 - 1.0) * 0.5 - imgZCenter / dz;  d_vec_t VNNR03ASDQ234RA___(hVNNR03ASDQ234RA___, hVNNR03ASDQ234RA___ + TOTVN); cudaTextureObject_t texObj; cudaArray* d_VNNR03ASDQ234RA___umeArray = nullptr; XCNVXCVA4ERHN3840EIOGNKFNASDFLJ<float>(texObj,d_VNNR03ASDQ234RA___umeArray, VMN0348HGRO2,CMNOI4BH3958BTUJ23,QAIWLRUW4W, thrust::raw_pointer_cast(&VNNR03ASDQ234RA___[0]), cudaMemcpyDeviceToDevice, cudaAddressModeBorder, cudaFilterModeLinear, cudaReadModeElementType,false);  d_vec_t _____XCV(CVNKLJFVN2390XZNKLS0RE34QRGFEDFS * ASD23MZNCDS23890I * ZXMCKLNAESD2038EIWONVF, 0); d_vec_t angs(hangs,hangs + ZXMCKLNAESD2038EIWONVF); d_vec_t zPos(hzPos, hzPos + ZXMCKLNAESD2038EIWONVF); d_vec_t d_xds(xds, xds + CVNKLJFVN2390XZNKLS0RE34QRGFEDFS); d_vec_t d_yds(yds, yds + CVNKLJFVN2390XZNKLS0RE34QRGFEDFS); d_vec_t d_zds(zds, zds + ASD23MZNCDS23890I);    thrust::device_vector<float3> cossinZT(ZXMCKLNAESD2038EIWONVF); thrust::transform( thrust::make_zip_iterator(thrust::make_tuple(angs.begin(), zPos.begin())), thrust::make_zip_iterator(thrust::make_tuple(angs.end(), zPos.end())), cossinZT.begin(),CTMBIR::ConstantForBackProjection<float>(x0,y0,z0));   dim3 KLCDNFKVG038Q4OHINGF34(64,16,1); dim3 KSLJNV830Q49EZSDKLNP2Q3((ASD23MZNCDS23890I + KLCDNFKVG038Q4OHINGF34.x - 1) / KLCDNFKVG038Q4OHINGF34.x, (CVNKLJFVN2390XZNKLS0RE34QRGFEDFS + KLCDNFKVG038Q4OHINGF34.y - 1) / KLCDNFKVG038Q4OHINGF34.y, (ZXMCKLNAESD2038EIWONVF + KLCDNFKVG038Q4OHINGF34.z - 1) / KLCDNFKVG038Q4OHINGF34.z);  ZCNKLXDVN3084ORHINJK9Q304UTIGNFK<<<KSLJNV830Q49EZSDKLNP2Q3,KLCDNFKVG038Q4OHINGF34>>>(texObj,thrust::raw_pointer_cast(&_____XCV[0]), make_float3(x0,y0,z0), thrust::raw_pointer_cast(&d_xds[0]), thrust::raw_pointer_cast(&d_yds[0]), thrust::raw_pointer_cast(&d_zds[0]), thrust::raw_pointer_cast(&cossinZT[0]), make_float3(objCntIdxX,objCntIdxY,objCntIdxZ), dx, dz, CMNOI4BH3958BTUJ23, QAIWLRUW4W, CVNKLJFVN2390XZNKLS0RE34QRGFEDFS, ASD23MZNCDS23890I, ZXMCKLNAESD2038EIWONVF); thrust::copy(_____XCV.begin(),_____XCV.end(),h_____XCV);   VNSDKJFN0834HSDFHKJSDHF(texObj,d_VNNR03ASDQ234RA___umeArray);  _____XCV.clear(); angs.clear(); zPos.clear(); d_xds.clear(); d_yds.clear(); d_zds.clear(); cossinZT.clear();  delete[] bxds; delete[] byds; delete[] bzds; }      __global__ void ______OPRGDMFKLBQ93ZXC893457( cudaTextureObject_t VNNR03ASDQ234RA___Tex1, cudaTextureObject_t VNNR03ASDQ234RA___Tex2, float* proj, float3 s, const float3* __restrict cossinZT, const float* __restrict xds, const float* __restrict yds, const float* __restrict zds, const float* __restrict bxds, const float* __restrict byds, const float* __restrict bzds, float3 objCntIdx, float dx, float dz, int CMNOI4BH3958BTUJ23, int QAIWLRUW4W, int CVNKLJFVN2390XZNKLS0RE34QRGFEDFS, int ASD23MZNCDS23890I, int ZXMCKLNAESD2038EIWONVF) { int detIdV = threadIdx.x + blockIdx.x * blockDim.x; int detIdU = threadIdx.y + blockIdx.y * blockDim.y; int angIdx = threadIdx.z + blockIdx.z * blockDim.z;  __shared__ float _xds[KLZSDHNQ04JAIO]; __shared__ float _yds[KLZSDHNQ04JAIO]; _xds[threadIdx.y] = xds[detIdU]; _yds[threadIdx.y] = yds[detIdU]; __syncthreads();  if(detIdU < CVNKLJFVN2390XZNKLS0RE34QRGFEDFS && detIdV < ASD23MZNCDS23890I && angIdx < ZXMCKLNAESD2038EIWONVF) { float3 dir = cossinZT[angIdx]; float3 cursour = make_float3( s.x * dir.x - s.y * dir.y, s.x * dir.y + s.y * dir.x, s.z + dir.z); s = cossinZT[angIdx]; float summ = _xds[threadIdx.y] * s.x - _yds[threadIdx.y] * s.y; float obj = _xds[threadIdx.y] * s.y + _yds[threadIdx.y] * s.x; float realL = bxds[detIdU]; float realR = byds[detIdU]; float realU = bxds[detIdU + 1]; float realD = byds[detIdU + 1];  float2 curDetL = make_float2( realL * s.x - realR * s.y, realL * s.y + realR * s.x);  float2 curDetR = make_float2( realU * s.x - realD * s.y, realU * s.y + realD * s.x); float4 curDet = make_float4(summ,obj,bzds[detIdV] + s.z,bzds[detIdV+1] + s.z); dir = normalize(make_float3( summ, obj, zds[detIdV] + s.z) - cursour);  summ = 0;  obj = 0;   float intersectLength, intersectQWEIOQUWOISDKLJ23; float invdz = 1.0 / dz; float invdx = 1.0 / dx;   float factL(1.0f);  float factR(1.0f); float factU(1.0f); float factD(1.0f); float constVal = 0;  if(fabsf(s.x) <= fabsf(s.y)) { summ = 0; factL = (curDetL.y - cursour.y) / (curDetL.x - cursour.x); factR = (curDetR.y - cursour.y) / (curDetR.x - cursour.x); factU = (curDet.w - cursour.z) / (curDet.x - cursour.x); factD = (curDet.z - cursour.z) / (curDet.x - cursour.x);  constVal = dx * dx * dz / (fabsf(dir.x)); 
#pragma unroll 
for(int ii = 0; ii < CMNOI4BH3958BTUJ23; ii++) { obj = (ii - objCntIdx.x) * dx;  realL = (obj - curDetL.x) * factL + curDetL.y; realR = (obj - curDetR.x) * factR + curDetR.y; realU = (obj - curDet.x) * factU + curDet.w; realD = (obj - curDet.x) * factD + curDet.z;  intersectLength = realR - realL; intersectQWEIOQUWOISDKLJ23 = realU - realD;  realD = realD * invdz + objCntIdx.z + 1; realR = realR * invdx + objCntIdx.y + 1; realU = realU * invdz + objCntIdx.z + 1; realL = realL * invdx + objCntIdx.y + 1;  summ += (tex3D<float>(VNNR03ASDQ234RA___Tex2, realD, realL, ii + 0.5f)   + tex3D<float>(VNNR03ASDQ234RA___Tex2, realU, realR, ii + 0.5f)   - (tex3D<float>(VNNR03ASDQ234RA___Tex2, realD, realR, ii + 0.5f)   + tex3D<float>(VNNR03ASDQ234RA___Tex2, realU, realL, ii + 0.5f))  ) / (intersectLength * intersectQWEIOQUWOISDKLJ23);  } __syncthreads(); proj[(angIdx * CVNKLJFVN2390XZNKLS0RE34QRGFEDFS + detIdU) * ASD23MZNCDS23890I + detIdV] = summ * constVal; } else { summ = 0;  factL = (curDetL.x - cursour.x) / (curDetL.y - cursour.y); factR = (curDetR.x - cursour.x) / (curDetR.y - cursour.y); factU = (curDet.w - cursour.z) / (curDet.y - cursour.y); factD = (curDet.z - cursour.z) / (curDet.y - cursour.y); constVal = dx * dx * dz / (fabsf(dir.y)); 
#pragma unroll 
for(int jj = 0; jj < QAIWLRUW4W; jj++) { obj = (jj - objCntIdx.y) * dx; realL = (obj - curDetL.y) * factL + curDetL.x; realR = (obj - curDetR.y) * factR + curDetR.x; realU = (obj - curDet.y) * factU + curDet.w; realD = (obj - curDet.y) * factD + curDet.z;  intersectLength = realR - realL; intersectQWEIOQUWOISDKLJ23 = realU - realD;  realD = realD * invdz + objCntIdx.z + 1; realR = realR * invdx + objCntIdx.x + 1; realU = realU * invdz + objCntIdx.z + 1; realL = realL * invdx + objCntIdx.x + 1;  summ += (tex3D<float>(VNNR03ASDQ234RA___Tex1, realD,realL, jj + 0.5f)   + tex3D<float>(VNNR03ASDQ234RA___Tex1, realU, realR, jj + 0.5f)   - (tex3D<float>(VNNR03ASDQ234RA___Tex1, realD, realR, jj + 0.5f)+   tex3D<float>(VNNR03ASDQ234RA___Tex1, realU, realL, jj + 0.5f))  )/ (intersectLength * intersectQWEIOQUWOISDKLJ23); } __syncthreads(); proj[(angIdx * CVNKLJFVN2390XZNKLS0RE34QRGFEDFS + detIdU) * ASD23MZNCDS23890I + detIdV] = summ * constVal; }  } }  void DD3_gpu_proj_branchless_sat2d( float x0, float y0, float z0, int CVNKLJFVN2390XZNKLS0RE34QRGFEDFS, int ASD23MZNCDS23890I,  float* xds, float* yds, float* zds, float imgXCenter, float imgYCenter, float imgZCenter, float* hangs, float* hzPos, int ZXMCKLNAESD2038EIWONVF, int CMNOI4BH3958BTUJ23, int QAIWLRUW4W, int VMN0348HGRO2, float* VNNR03ASDQ234RA___, float* h_____XCV, float dx, float dz, byte* mask, int gpunum) {  for(int i = 0; i != CMNOI4BH3958BTUJ23 * QAIWLRUW4W; ++i) { byte v = mask[i]; for(int z = 0; z != VMN0348HGRO2; ++z) { VNNR03ASDQ234RA___[i * VMN0348HGRO2 + z] = VNNR03ASDQ234RA___[i * VMN0348HGRO2 + z] * v; } } CUDA_SAFE_CALL(cudaSetDevice(gpunum));  CUDA_SAFE_CALL(cudaDeviceReset());  float* bxds = new float[CVNKLJFVN2390XZNKLS0RE34QRGFEDFS + 1]; float* byds = new float[CVNKLJFVN2390XZNKLS0RE34QRGFEDFS + 1]; float* bzds = new float[ASD23MZNCDS23890I + 1];  DD3Boundaries(CVNKLJFVN2390XZNKLS0RE34QRGFEDFS + 1, xds, bxds); DD3Boundaries(CVNKLJFVN2390XZNKLS0RE34QRGFEDFS + 1, yds, byds); DD3Boundaries(ASD23MZNCDS23890I + 1, zds, bzds);  cudaStream_t streams[4]; CUDA_SAFE_CALL(cudaStreamCreate(&streams[0])); CUDA_SAFE_CALL(cudaStreamCreate(&streams[1])); CUDA_SAFE_CALL(cudaStreamCreate(&streams[2])); CUDA_SAFE_CALL(cudaStreamCreate(&streams[3]));  float objCntIdxX = (CMNOI4BH3958BTUJ23 - 1.0) * 0.5 - imgXCenter / dx; float objCntIdxY = (QAIWLRUW4W - 1.0) * 0.5 - imgYCenter / dx; float objCntIdxZ = (VMN0348HGRO2 - 1.0) * 0.5 - imgZCenter / dz;   thrust::device_vector<float> SATZXY; thrust::device_vector<float> SATZYX; ______XCNV9340KL9340KFDL(VNNR03ASDQ234RA___,SATZXY,SATZYX, CMNOI4BH3958BTUJ23, QAIWLRUW4W, VMN0348HGRO2);   cudaTextureObject_t texObj1; cudaArray* d_VNNR03ASDQ234RA___umeArray1 = nullptr; cudaTextureObject_t texObj2; cudaArray* d_VNNR03ASDQ234RA___umeArray2 = nullptr; XCNVXCVA4ERHN3840EIOGNKFNASDFLJ<float>(texObj1,d_VNNR03ASDQ234RA___umeArray1, VMN0348HGRO2 + 1,CMNOI4BH3958BTUJ23 + 1,QAIWLRUW4W, thrust::raw_pointer_cast(&SATZXY[0]), cudaMemcpyDeviceToDevice, cudaAddressModeClamp, cudaFilterModeLinear, cudaReadModeElementType,false); SATZXY.clear(); XCNVXCVA4ERHN3840EIOGNKFNASDFLJ<float>(texObj2,d_VNNR03ASDQ234RA___umeArray2, VMN0348HGRO2 + 1,QAIWLRUW4W + 1,CMNOI4BH3958BTUJ23, thrust::raw_pointer_cast(&SATZYX[0]), cudaMemcpyDeviceToDevice, cudaAddressModeClamp, cudaFilterModeLinear, cudaReadModeElementType,false); SATZYX.clear();  thrust::device_vector<float> _____XCV(CVNKLJFVN2390XZNKLS0RE34QRGFEDFS * ASD23MZNCDS23890I * ZXMCKLNAESD2038EIWONVF, 0);  thrust::device_vector<float> d_xds(xds, xds + CVNKLJFVN2390XZNKLS0RE34QRGFEDFS);  thrust::device_vector<float> d_yds(yds, yds + CVNKLJFVN2390XZNKLS0RE34QRGFEDFS);  thrust::device_vector<float> d_zds(zds, zds + ASD23MZNCDS23890I);  thrust::device_vector<float> d_bxds(bxds, bxds + CVNKLJFVN2390XZNKLS0RE34QRGFEDFS + 1);  thrust::device_vector<float> d_byds(byds, byds + CVNKLJFVN2390XZNKLS0RE34QRGFEDFS + 1);  thrust::device_vector<float> d_bzds(bzds, bzds + ASD23MZNCDS23890I + 1);   thrust::device_vector<float> angs(hangs, hangs + ZXMCKLNAESD2038EIWONVF); thrust::device_vector<float> zPos(hzPos, hzPos + ZXMCKLNAESD2038EIWONVF);  thrust::device_vector<float3> cossinZT(ZXMCKLNAESD2038EIWONVF); thrust::transform( thrust::make_zip_iterator(thrust::make_tuple(angs.begin(), zPos.begin())), thrust::make_zip_iterator(thrust::make_tuple(angs.end(), zPos.end())), cossinZT.begin(),CTMBIR::ConstantForBackProjection<float>(x0,y0,z0));  dim3 KLCDNFKVG038Q4OHINGF34; dim3 KSLJNV830Q49EZSDKLNP2Q3; KLCDNFKVG038Q4OHINGF34.x = VAMDSN3409UOJIFK;  KLCDNFKVG038Q4OHINGF34.y = KLZSDHNQ04JAIO;  KLCDNFKVG038Q4OHINGF34.z = SKLJDFNGHW9835GJK35TG;  KSLJNV830Q49EZSDKLNP2Q3.x = (ASD23MZNCDS23890I + KLCDNFKVG038Q4OHINGF34.x - 1) / KLCDNFKVG038Q4OHINGF34.x; KSLJNV830Q49EZSDKLNP2Q3.y = (CVNKLJFVN2390XZNKLS0RE34QRGFEDFS + KLCDNFKVG038Q4OHINGF34.y - 1) / KLCDNFKVG038Q4OHINGF34.y; KSLJNV830Q49EZSDKLNP2Q3.z = (ZXMCKLNAESD2038EIWONVF + KLCDNFKVG038Q4OHINGF34.z - 1) / KLCDNFKVG038Q4OHINGF34.z;   ______OPRGDMFKLBQ93ZXC893457<<<KSLJNV830Q49EZSDKLNP2Q3,KLCDNFKVG038Q4OHINGF34>>>(texObj1,texObj2, thrust::raw_pointer_cast(&_____XCV[0]), make_float3(x0,y0,z0), thrust::raw_pointer_cast(&cossinZT[0]), thrust::raw_pointer_cast(&d_xds[0]), thrust::raw_pointer_cast(&d_yds[0]), thrust::raw_pointer_cast(&d_zds[0]), thrust::raw_pointer_cast(&d_bxds[0]), thrust::raw_pointer_cast(&d_byds[0]), thrust::raw_pointer_cast(&d_bzds[0]), make_float3(objCntIdxX, objCntIdxY,objCntIdxZ), dx, dz, CMNOI4BH3958BTUJ23, QAIWLRUW4W, CVNKLJFVN2390XZNKLS0RE34QRGFEDFS, ASD23MZNCDS23890I, ZXMCKLNAESD2038EIWONVF); thrust::copy(_____XCV.begin(),_____XCV.end(),h_____XCV);  CUDA_SAFE_CALL(cudaDestroyTextureObject(texObj1)); CUDA_SAFE_CALL(cudaDestroyTextureObject(texObj2));  VNSDKJFN0834HSDFHKJSDHF(texObj1,d_VNNR03ASDQ234RA___umeArray1); VNSDKJFN0834HSDFHKJSDHF(texObj2,d_VNNR03ASDQ234RA___umeArray2);  angs.clear(); zPos.clear(); _____XCV.clear(); d_xds.clear(); d_yds.clear(); d_zds.clear(); d_bxds.clear(); d_byds.clear(); d_bzds.clear(); cossinZT.clear();  delete[] bxds; delete[] byds; delete[] bzds;  }     template<typename T> void DD3Boundaries(int nrBoundaries, thrust::host_vector<T>& Centers, thrust::host_vector<T>& Boundaries) { int i; T* pBoundaries = &Boundaries[0]; T* pCenters = &Centers[0]; if (nrBoundaries >= 3) { *pBoundaries++ = 1.5 * *pCenters - 0.5 * *(pCenters + 1); for (i = 1; i <= (nrBoundaries - 2); i++) { *pBoundaries++ = 0.5 * *pCenters + 0.5 * *(pCenters + 1); pCenters++; } *pBoundaries = 1.5 * *pCenters - 0.5 * *(pCenters - 1); } else { *pBoundaries = *pCenters - 0.5; *(pBoundaries + 1) = *pCenters + 0.5; }  }    __global__ void DD3Proj_branches_ker(float* proj, const float* VNNR03ASDQ234RA___, float x0, float y0, float z0, const float* xds, const float* yds, const float* bxds, const float* byds, const float* bzds, float3* cossinZT, float objCntIdxX, float objCntIdxY, float objCntIdxZ, const int CMNOI4BH3958BTUJ23, const int QAIWLRUW4W, const int VMN0348HGRO2, const int CVNKLJFVN2390XZNKLS0RE34QRGFEDFS, const int ASD23MZNCDS23890I, const int ZXMCKLNAESD2038EIWONVF, float dx, float dz) { const int detIdV = threadIdx.x + blockIdx.x * blockDim.x;  const int detIdU = threadIdx.y + blockIdx.y * blockDim.y;  const int angIdx = threadIdx.z + blockIdx.z * blockDim.z;  if (detIdU < CVNKLJFVN2390XZNKLS0RE34QRGFEDFS && detIdV < ASD23MZNCDS23890I && angIdx < ZXMCKLNAESD2038EIWONVF) { float cosT = cossinZT[angIdx].x; float sinT = cossinZT[angIdx].y; float zPos = cossinZT[angIdx].z; float3 cursour = make_float3(x0 * cosT - y0 * sinT, x0 * sinT + y0 * cosT, z0 + zPos); float summ = 0;  float detPosLX = bxds[detIdU]; float detPosRX = bxds[detIdU + 1]; float detPosLY = byds[detIdU]; float detPosRY = byds[detIdU + 1]; float detPosDZ = bzds[detIdV]; float detPosUZ = detPosDZ + dz;  float curDirLX = detPosLX * cosT - detPosLY * sinT - cursour.x; float curDirLY = detPosLX * sinT + detPosLY * cosT - cursour.y;  float curDirRX = detPosRX * cosT - detPosRY * sinT - cursour.x; float curDirRY = detPosRX * sinT + detPosRY * cosT - cursour.y; float curDirDZ = detPosDZ + zPos - cursour.z; float curDirUZ = detPosUZ + zPos - cursour.z;  float dirX = xds[detIdU] * cosT - yds[detIdU] * sinT - cursour.x; float dirY = xds[detIdU] * sinT + yds[detIdU] * cosT - cursour.y; float dirZ = detPosDZ - 0.5 * dz - z0;   if (fabsf(dirX) < fabsf(dirY)) { detPosLX = -cursour.y * curDirLX / curDirLY + cursour.x; detPosRX = -cursour.y * curDirRX / curDirRY + cursour.x; detPosDZ = -cursour.y * curDirDZ / dirY + cursour.z; detPosUZ = -cursour.y * curDirUZ / dirY + cursour.z; dirZ = dx / fabsf(dirY / sqrtf(dirY * dirY + dirX * dirX + dirZ * dirZ) * (detPosLX - detPosRX) * (detPosUZ - detPosDZ));  if (detPosLX > detPosRX) { zPos = detPosLX; detPosLX = detPosRX; detPosRX = zPos; } for (int jj = 0; jj < QAIWLRUW4W; jj++) { y0 = (jj - objCntIdxY) * dx - cursour.y; zPos = y0 / curDirLY;  cosT = zPos * curDirLX + cursour.x; sinT = zPos * curDirRX + cursour.x; x0 = zPos * curDirDZ + cursour.z; z0 = zPos * curDirUZ + cursour.z; if (cosT > sinT) { zPos = cosT; cosT = sinT; sinT = zPos; }  int minXIdx = floor(cosT / dx + objCntIdxX) - 1;  int maxXIdx = ceil(sinT / dx + objCntIdxX) + 1; int minZIdx = floor(x0 / dz + objCntIdxZ) - 1;  int maxZIdx = ceil(z0 / dz + objCntIdxZ) + 1; if (maxXIdx < 0) { continue; } if (minXIdx > CMNOI4BH3958BTUJ23) { continue; } if (maxZIdx < 0) { continue; } if (minZIdx > VMN0348HGRO2) { continue; } if (minXIdx < 0) { minXIdx = 0; } if (maxXIdx > CMNOI4BH3958BTUJ23) { maxXIdx = CMNOI4BH3958BTUJ23; } if (minZIdx < 0) { minZIdx = 0; } if (maxZIdx > VMN0348HGRO2) { maxZIdx = VMN0348HGRO2; }  cosT = (cursour.x - (minXIdx - objCntIdxX) * dx) * cursour.y / y0 + cursour.x;  for (int ii = minXIdx; ii < maxXIdx; ii++) { sinT = cosT - dx * cursour.y / y0; dirX = intersectLength_device<float>(detPosLX, detPosRX, cosT, sinT); x0 = (cursour.z - (minZIdx - objCntIdxZ) * dz) * cursour.y / y0 + cursour.z; for (int kk = minZIdx; kk < maxZIdx; kk++) { z0 = x0 - dz * cursour.y / y0; dirY = intersectLength_device<float>(detPosDZ, detPosUZ, x0, z0); summ += VNNR03ASDQ234RA___[(jj * CMNOI4BH3958BTUJ23 + ii) * VMN0348HGRO2 + kk] * (dirX * dirY); x0 = z0; } cosT = sinT; } } proj[(angIdx * CVNKLJFVN2390XZNKLS0RE34QRGFEDFS + detIdU) * ASD23MZNCDS23890I + detIdV] = summ * dirZ; } else { detPosLY = -cursour.x * curDirLY / curDirLX + cursour.y; detPosRY = -cursour.x * curDirRY / curDirRX + cursour.y; detPosDZ = -cursour.x * curDirDZ / dirX + cursour.z; detPosUZ = -cursour.x * curDirUZ / dirX + cursour.z; dirZ = dx / fabsf(dirX / sqrtf(dirY * dirY + dirX * dirX + dirZ * dirZ) * (detPosLY - detPosRY) * (detPosUZ - detPosDZ));  if (detPosLY > detPosRY) { zPos = detPosLY; detPosLY = detPosRY; detPosRY = zPos; }  for (int ii = 0; ii < CMNOI4BH3958BTUJ23; ii++) { x0 = (ii - objCntIdxX) * dx - cursour.x; zPos = x0 / curDirLX;  cosT = zPos * curDirLY + cursour.y; sinT = zPos * curDirRY + cursour.y; y0 = zPos * curDirDZ + cursour.z; z0 = zPos * curDirUZ + cursour.z; if (cosT > sinT){ zPos = cosT; cosT = sinT; sinT = zPos; }  int minYIdx = floor(cosT / dx + objCntIdxY) - 1; int maxYIdx = ceil(sinT / dx + objCntIdxY) + 1; int minZIdx = floor(y0 / dz + objCntIdxZ) - 1; int maxZIdx = ceil(z0 / dz + objCntIdxZ) + 1; if (maxYIdx < 0) { continue; } if (minYIdx > CMNOI4BH3958BTUJ23) { continue; } if (maxZIdx < 0) { continue; } if (minZIdx > VMN0348HGRO2) { continue; } if (minYIdx < 0) { minYIdx = 0; } if (maxYIdx > CMNOI4BH3958BTUJ23) { maxYIdx = QAIWLRUW4W; } if (minZIdx < 0) { minZIdx = 0; } if (maxZIdx > VMN0348HGRO2) { maxZIdx = VMN0348HGRO2; }  cosT = (cursour.y - (minYIdx - objCntIdxY) * dx) * cursour.x / x0 + cursour.y; for (int jj = minYIdx; jj < maxYIdx; jj++) { sinT = cosT - dx * cursour.x / x0;     dirX = intersectLength_device<float>(detPosLY, detPosRY, cosT, sinT); y0 = (cursour.z - (minZIdx - objCntIdxZ) * dz) * cursour.x / x0 + cursour.z; for (int kk = minZIdx; kk < maxZIdx; kk++) { z0 = y0 - dz * cursour.x / x0; dirY = intersectLength_device<float>(detPosDZ, detPosUZ, y0, z0); summ += VNNR03ASDQ234RA___[(jj * CMNOI4BH3958BTUJ23 + ii) * VMN0348HGRO2 + kk] * (dirX * dirY); y0 = z0; } cosT = sinT; } } proj[(angIdx * CVNKLJFVN2390XZNKLS0RE34QRGFEDFS + detIdU) * ASD23MZNCDS23890I + detIdV] = summ * dirZ; } } }  void DD3Proj_branches(float x0, float y0, float z0, int CVNKLJFVN2390XZNKLS0RE34QRGFEDFS, int ASD23MZNCDS23890I, float* xds, float* yds, float* zds, float imgXCenter, float imgYCenter, float imgZCenter, float* hangs, float* hzPos, int ZXMCKLNAESD2038EIWONVF, int CMNOI4BH3958BTUJ23, int QAIWLRUW4W, int VMN0348HGRO2, float* hVNNR03ASDQ234RA___, float* h_____XCV, float dx, float dz, byte* mask, int gpunum) { cudaSetDevice(gpunum); for (int jj = 0; jj != QAIWLRUW4W; ++jj) { for (int ii = 0; ii != CMNOI4BH3958BTUJ23; ++ii) { byte tempV = mask[jj * CMNOI4BH3958BTUJ23 + ii]; for (int kk = 0; kk != VMN0348HGRO2; ++kk) { hVNNR03ASDQ234RA___[(jj * CMNOI4BH3958BTUJ23 + ii) * VMN0348HGRO2 + kk] *= static_cast<float>(tempV); } } } thrust::host_vector<float3> hcossinZT(ZXMCKLNAESD2038EIWONVF); for (int i = 0; i != ZXMCKLNAESD2038EIWONVF; ++i) { hcossinZT[i].x = cosf(hangs[i]); hcossinZT[i].y = sinf(hangs[i]); hcossinZT[i].z = hzPos[i]; } thrust::device_vector<float3> cossinZT = hcossinZT;  thrust::host_vector<float> hxds(xds, xds + CVNKLJFVN2390XZNKLS0RE34QRGFEDFS); thrust::host_vector<float> hyds(yds, yds + CVNKLJFVN2390XZNKLS0RE34QRGFEDFS); thrust::host_vector<float> hzds(zds, zds + ASD23MZNCDS23890I);   thrust::host_vector<float> bxds(CVNKLJFVN2390XZNKLS0RE34QRGFEDFS + 1, 0); thrust::host_vector<float> byds(CVNKLJFVN2390XZNKLS0RE34QRGFEDFS + 1, 0); thrust::host_vector<float> bzds(ASD23MZNCDS23890I + 1, 0);  DD3Boundaries<float>(CVNKLJFVN2390XZNKLS0RE34QRGFEDFS + 1, hxds, bxds); DD3Boundaries<float>(CVNKLJFVN2390XZNKLS0RE34QRGFEDFS + 1, hyds, byds); DD3Boundaries<float>(ASD23MZNCDS23890I + 1, hzds, bzds);  thrust::device_vector<float> dxds = hxds; thrust::device_vector<float> dyds = hyds; thrust::device_vector<float> dzds = hzds;  thrust::device_vector<float> dbxds = bxds; thrust::device_vector<float> dbyds = byds; thrust::device_vector<float> dbzds = bzds;  thrust::device_vector<float> d_____XCV(h_____XCV, h_____XCV + CVNKLJFVN2390XZNKLS0RE34QRGFEDFS*ASD23MZNCDS23890I*ZXMCKLNAESD2038EIWONVF); thrust::device_vector<float> dVNNR03ASDQ234RA___(hVNNR03ASDQ234RA___, hVNNR03ASDQ234RA___ + CMNOI4BH3958BTUJ23*QAIWLRUW4W*VMN0348HGRO2);  dim3 KLCDNFKVG038Q4OHINGF34(64, 4, 1); dim3 KSLJNV830Q49EZSDKLNP2Q3( (ASD23MZNCDS23890I + KLCDNFKVG038Q4OHINGF34.x - 1) / KLCDNFKVG038Q4OHINGF34.x, (CVNKLJFVN2390XZNKLS0RE34QRGFEDFS + KLCDNFKVG038Q4OHINGF34.y - 1) / KLCDNFKVG038Q4OHINGF34.y, (ZXMCKLNAESD2038EIWONVF + KLCDNFKVG038Q4OHINGF34.z - 1) / KLCDNFKVG038Q4OHINGF34.z);  float objCntIdxX = (static_cast<float>(CMNOI4BH3958BTUJ23) - 1.0f) * 0.5f - imgXCenter / dx; float objCntIdxY = (static_cast<float>(QAIWLRUW4W) - 1.0f) * 0.5f - imgYCenter / dx; float objCntIdxZ = (static_cast<float>(VMN0348HGRO2) - 1.0f) * 0.5f - imgZCenter / dz;  DD3Proj_branches_ker << <KSLJNV830Q49EZSDKLNP2Q3, KLCDNFKVG038Q4OHINGF34 >> >( thrust::raw_pointer_cast(&d_____XCV[0]), thrust::raw_pointer_cast(&dVNNR03ASDQ234RA___[0]), x0, y0, z0, thrust::raw_pointer_cast(&dxds[0]), thrust::raw_pointer_cast(&dyds[0]), thrust::raw_pointer_cast(&dbxds[0]), thrust::raw_pointer_cast(&dbyds[0]), thrust::raw_pointer_cast(&dbzds[0]), thrust::raw_pointer_cast(&cossinZT[0]), objCntIdxX, objCntIdxY, objCntIdxZ, CMNOI4BH3958BTUJ23, QAIWLRUW4W, VMN0348HGRO2, CVNKLJFVN2390XZNKLS0RE34QRGFEDFS, ASD23MZNCDS23890I, ZXMCKLNAESD2038EIWONVF, dx, dz); thrust::copy(d_____XCV.begin(), d_____XCV.end(), h_____XCV); hcossinZT.clear(); cossinZT.clear(); hxds.clear(); hyds.clear();     hzds.clear(); bxds.clear(); byds.clear(); bzds.clear(); dxds.clear(); dyds.clear(); dzds.clear();  dbxds.clear(); dbyds.clear(); dbzds.clear(); d_____XCV.clear(); dVNNR03ASDQ234RA___.clear(); }  void DD3Proj_gpu(   float x0, float y0, float z0,    int CVNKLJFVN2390XZNKLS0RE34QRGFEDFS, int ASD23MZNCDS23890I,     float* xds, float* yds, float* zds,   float imgXCenter, float imgYCenter, float imgZCenter,    float* hangs, float* hzPos, int ZXMCKLNAESD2038EIWONVF,    int CMNOI4BH3958BTUJ23, int QAIWLRUW4W, int VMN0348HGRO2,    float* hVNNR03ASDQ234RA___, float* h_____XCV,    float dx, float dz,    byte* mask, int gpunum, int _____XCVMode) { switch(_____XCVMode)     {         case 0:             DD3_gpu_proj_branchless_sat2d(x0, y0, z0,CVNKLJFVN2390XZNKLS0RE34QRGFEDFS, ASD23MZNCDS23890I,             xds,yds, zds,             imgXCenter,imgYCenter, imgZCenter,             hangs, hzPos, ZXMCKLNAESD2038EIWONVF, CMNOI4BH3958BTUJ23, QAIWLRUW4W, VMN0348HGRO2,             hVNNR03ASDQ234RA___, h_____XCV, dx, dz, mask, 0);             break;         case 1:             ______XCKMVN840WNJK9Q02HJIFKS(x0, y0, z0,CVNKLJFVN2390XZNKLS0RE34QRGFEDFS, ASD23MZNCDS23890I,             xds,yds, zds,             imgXCenter,imgYCenter, imgZCenter,             hangs, hzPos, ZXMCKLNAESD2038EIWONVF, CMNOI4BH3958BTUJ23, QAIWLRUW4W, VMN0348HGRO2,             hVNNR03ASDQ234RA___, h_____XCV, dx, dz, mask, 0);             break;         case 2:             DD3_gpu_proj_doubleprecisionbranchless(x0, y0, z0,CVNKLJFVN2390XZNKLS0RE34QRGFEDFS, ASD23MZNCDS23890I,             xds,yds, zds,             imgXCenter,imgYCenter, imgZCenter,             hangs, hzPos, ZXMCKLNAESD2038EIWONVF, CMNOI4BH3958BTUJ23, QAIWLRUW4W, VMN0348HGRO2,             hVNNR03ASDQ234RA___, h_____XCV, dx, dz, mask, 0);             break;         case 3:             break;          case 4:              DD3Proj_branches(x0, y0, z0, CVNKLJFVN2390XZNKLS0RE34QRGFEDFS, ASD23MZNCDS23890I, xds, yds, zds,              imgXCenter, imgYCenter, imgZCenter,             hangs, hzPos, ZXMCKLNAESD2038EIWONVF, CMNOI4BH3958BTUJ23, QAIWLRUW4W, VMN0348HGRO2,             hVNNR03ASDQ234RA___, h_____XCV, dx, dz, mask, 0);             break;         default:             DD3_gpu_proj_branchless_sat2d(x0, y0, z0,CVNKLJFVN2390XZNKLS0RE34QRGFEDFS, ASD23MZNCDS23890I,             xds,yds, zds,             imgXCenter,imgYCenter, imgZCenter,             hangs, hzPos, ZXMCKLNAESD2038EIWONVF, CMNOI4BH3958BTUJ23, QAIWLRUW4W, VMN0348HGRO2,             hVNNR03ASDQ234RA___, h_____XCV, dx, dz, mask, 0);             break;      } }     
