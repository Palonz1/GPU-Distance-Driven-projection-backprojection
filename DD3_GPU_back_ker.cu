#include "utilities.cuh" 
#include "DD3_GPU_back.h" 
#define VNJSD38VV 64 
#define VSER23RTY5Z 4 
#define BVN54VBSF 1   
enum KGFH5GDF3EFC{BDRFGYUIP345, VZXCQAWD43HRTGFHN6754EFSD, QASCFG54EDFGHJ, VBGHH654EWFVBMJKI890POI7U65};  
#ifndef CALDETPARAS 
#define CALDETPARAS  
float4 calDetParas(float* XCV423FEDFV, float* BVHTY654RGBGNH, float* V345THBSD,float NJU8765TGHJKO987YGH, float VCVCVDF34ASDFQ2, float OPYURTOI56890, int VRTJGRFDGE3434878789, int NBTJN5948NRFD) { float* bXCV423FEDFV = new float[VRTJGRFDGE3434878789 + 1]; float* bBVHTY654RGBGNH = new float[VRTJGRFDGE3434878789 + 1]; float* bV345THBSD = new float[NBTJN5948NRFD + 1];  DD3Boundaries(VRTJGRFDGE3434878789 + 1, XCV423FEDFV, bXCV423FEDFV); DD3Boundaries(VRTJGRFDGE3434878789 + 1, BVHTY654RGBGNH, bBVHTY654RGBGNH); DD3Boundaries(NBTJN5948NRFD + 1, V345THBSD, bV345THBSD);  float MBNJTNOUBDNGI = (bV345THBSD[NBTJN5948NRFD] - bV345THBSD[0]) / NBTJN5948NRFD; float TYOUIORT890 = (-(bV345THBSD[0] - OPYURTOI56890) / MBNJTNOUBDNGI) - 0.5;  float2 MBNGFKLNBORJFKV  = normalize(make_float2(-NJU8765TGHJKO987YGH, -VCVCVDF34ASDFQ2));  float2 MBNGFKLNBORJFKVL = normalize(make_float2(bXCV423FEDFV[0] - NJU8765TGHJKO987YGH, bBVHTY654RGBGNH[0] - VCVCVDF34ASDFQ2));  float2 MBNGFKLNBORJFKVR = normalize(make_float2(bXCV423FEDFV[VRTJGRFDGE3434878789] - NJU8765TGHJKO987YGH, bBVHTY654RGBGNH[VRTJGRFDGE3434878789] - VCVCVDF34ASDFQ2 ));  float VBMNNDFGJIH5894 = asin(MBNGFKLNBORJFKVL.x * MBNGFKLNBORJFKVR.y - MBNGFKLNBORJFKVL.y * MBNGFKLNBORJFKVR.x) / VRTJGRFDGE3434878789;  float MNKHYJHIHJRIJUTG = asin(MBNGFKLNBORJFKV.x * MBNGFKLNBORJFKVL.y - MBNGFKLNBORJFKV.y * MBNGFKLNBORJFKVL.x);  float FKIGEORTU45906DFKLJ = -MNKHYJHIHJRIJUTG / VBMNNDFGJIH5894 - 0.5;  delete[] bXCV423FEDFV; delete[] bBVHTY654RGBGNH; delete[] bV345THBSD; return make_float4(FKIGEORTU45906DFKLJ, TYOUIORT890, VBMNNDFGJIH5894, MBNJTNOUBDNGI); } 
#endif
    __global__ void addTwoSidedZeroBoarder(float* NBVJDFE5849DHFJU234DFEG, float* BMGKBHNFLDGJ9034UDF, const int VRTJGRFDGE3434878789, const int NBTJN5948NRFD, const int MVNDJSKFSDH234) { int CMVNDSFKJGBH34OIHFSD = threadIdx.x + blockIdx.x * blockDim.x; int VBMNSDKJFWE6789GFR56 = threadIdx.y + blockIdx.y * blockDim.y; int ERITU9340DFKLGJ90 = threadIdx.z + blockIdx.z * blockDim.z; if(VBMNSDKJFWE6789GFR56 < VRTJGRFDGE3434878789 && CMVNDSFKJGBH34OIHFSD < NBTJN5948NRFD && ERITU9340DFKLGJ90 < MVNDJSKFSDH234) { int VBMNNVBJKFDGSEROIWE5445568 = (ERITU9340DFKLGJ90 * VRTJGRFDGE3434878789 + VBMNSDKJFWE6789GFR56) * NBTJN5948NRFD + CMVNDSFKJGBH34OIHFSD; int MXCNVWEKJI214DVFB = (ERITU9340DFKLGJ90 * (VRTJGRFDGE3434878789 + 2) + (VBMNSDKJFWE6789GFR56 + 1)) * (NBTJN5948NRFD + 2) + CMVNDSFKJGBH34OIHFSD + 1; BMGKBHNFLDGJ9034UDF[MXCNVWEKJI214DVFB] = NBVJDFE5849DHFJU234DFEG[VBMNNVBJKFDGSEROIWE5445568]; } }   __global__ void __VFBNKLSDNFG93Q04OGJIDNFKLZADSF (float* WERERY546ERPO6ERG5E, float* BNDOGJISDFQWQWE23, int VRTJGRFDGE3434878789, int NBTJN5948NRFD, int MVNDJSKFSDH234) { int CMVNDSFKJGBH34OIHFSD = threadIdx.x + blockIdx.x * blockDim.x; int VBMNSDKJFWE6789GFR56 = threadIdx.y + blockIdx.y * blockDim.y; int BNMFLGN3O4IHRNDFKLW3QP423 = threadIdx.z + blockIdx.z * blockDim.z; if(VBMNSDKJFWE6789GFR56 < VRTJGRFDGE3434878789 && CMVNDSFKJGBH34OIHFSD < NBTJN5948NRFD && BNMFLGN3O4IHRNDFKLW3QP423 < MVNDJSKFSDH234) { int i = (BNMFLGN3O4IHRNDFKLW3QP423 * VRTJGRFDGE3434878789 + VBMNSDKJFWE6789GFR56) * NBTJN5948NRFD + CMVNDSFKJGBH34OIHFSD; int ni = (BNMFLGN3O4IHRNDFKLW3QP423 * (VRTJGRFDGE3434878789 + 1) + (VBMNSDKJFWE6789GFR56 + 1)) * (NBTJN5948NRFD + 1) + (CMVNDSFKJGBH34OIHFSD + 1); BNDOGJISDFQWQWE23[ni] = WERERY546ERPO6ERG5E[i]; } }    __global__ void _V23W34O95UHJIDKLCHG(float* OREIO93405UJIDFKLSG23, int XCZNVKJR23SDF, int N) { int idx = threadIdx.x + blockIdx.x * blockDim.x; if(idx < N) { int VMRGNK5940JOTGIDFK = idx * XCZNVKJR23SDF; for(int VDNSRFKLVNKL3KLJG9340UERIGKLJ = 1; VDNSRFKLVNKL3KLJG9340UERIGKLJ < XCZNVKJR23SDF; ++VDNSRFKLVNKL3KLJG9340UERIGKLJ) { OREIO93405UJIDFKLSG23[VMRGNK5940JOTGIDFK + VDNSRFKLVNKL3KLJG9340UERIGKLJ] = OREIO93405UJIDFKLSG23[VMRGNK5940JOTGIDFK + VDNSRFKLVNKL3KLJG9340UERIGKLJ] + OREIO93405UJIDFKLSG23[VMRGNK5940JOTGIDFK + VDNSRFKLVNKL3KLJG9340UERIGKLJ - 1]; } } }  __global__ void _MNCSDKLFNSWDFCVHZXCVKL345R345(float* OREIO93405UJIDFKLSG23, int VRTJGRFDGE3434878789, int NBTJN5948NRFD, int MVNDJSKFSDH234) { int CMVNDSFKJGBH34OIHFSD = threadIdx.x + blockIdx.x * blockDim.x; int DKLFOISRTUDFKLJGH348957REWGSGF = threadIdx.y + blockIdx.y * blockDim.y; if (CMVNDSFKJGBH34OIHFSD < NBTJN5948NRFD && DKLFOISRTUDFKLJGH348957REWGSGF < MVNDJSKFSDH234) { int IERYIOERTI345DFCG = DKLFOISRTUDFKLJGH348957REWGSGF * VRTJGRFDGE3434878789 * NBTJN5948NRFD + CMVNDSFKJGBH34OIHFSD; for(int VDNSRFKLVNKL3KLJG9340UERIGKLJ = 1; VDNSRFKLVNKL3KLJG9340UERIGKLJ < VRTJGRFDGE3434878789; ++VDNSRFKLVNKL3KLJG9340UERIGKLJ) { OREIO93405UJIDFKLSG23[IERYIOERTI345DFCG + VDNSRFKLVNKL3KLJG9340UERIGKLJ * NBTJN5948NRFD] = OREIO93405UJIDFKLSG23[IERYIOERTI345DFCG + VDNSRFKLVNKL3KLJG9340UERIGKLJ * NBTJN5948NRFD] + OREIO93405UJIDFKLSG23[IERYIOERTI345DFCG + (VDNSRFKLVNKL3KLJG9340UERIGKLJ - 1) * NBTJN5948NRFD]; } } }  thrust::device_vector<float> ___KLDFGJGSDFGSDFNDGGS( float* hOREIO93405UJIDFKLSG23, int VRTJGRFDGE3434878789, int NBTJN5948NRFD,  int MVNDJSKFSDH234)   { const int siz = VRTJGRFDGE3434878789 * NBTJN5948NRFD * MVNDJSKFSDH234; const int MBVKLDRHFJE345DFKL54 = (VRTJGRFDGE3434878789 + 1) * (NBTJN5948NRFD + 1) * MVNDJSKFSDH234; thrust::device_vector<float> OREIO93405UJIDFKLSG23SAT(MBVKLDRHFJE345DFKL54, 0);  thrust::device_vector<float> OREIO93405UJIDFKLSG23(hOREIO93405UJIDFKLSG23, hOREIO93405UJIDFKLSG23 + siz); dim3 VASDTQ34GBFGH4W5TDFS(64,16,1); dim3 VE45TWERFVSRTY63453EGBGFHJ56Y( (NBTJN5948NRFD + VASDTQ34GBFGH4W5TDFS.x - 1) / VASDTQ34GBFGH4W5TDFS.x, (VRTJGRFDGE3434878789 + VASDTQ34GBFGH4W5TDFS.y - 1) / VASDTQ34GBFGH4W5TDFS.y, (MVNDJSKFSDH234 + VASDTQ34GBFGH4W5TDFS.z - 1) / VASDTQ34GBFGH4W5TDFS.z); __VFBNKLSDNFG93Q04OGJIDNFKLZADSF<<<VE45TWERFVSRTY63453EGBGFHJ56Y,VASDTQ34GBFGH4W5TDFS>>>( thrust::raw_pointer_cast(&OREIO93405UJIDFKLSG23[0]), thrust::raw_pointer_cast(&OREIO93405UJIDFKLSG23SAT[0]), VRTJGRFDGE3434878789, NBTJN5948NRFD, MVNDJSKFSDH234); const int nVRTJGRFDGE3434878789 = VRTJGRFDGE3434878789 + 1; const int nNBTJN5948NRFD = NBTJN5948NRFD + 1;   VASDTQ34GBFGH4W5TDFS.x = 512; VASDTQ34GBFGH4W5TDFS.y = 1; VASDTQ34GBFGH4W5TDFS.z = 1; VE45TWERFVSRTY63453EGBGFHJ56Y.x = (nVRTJGRFDGE3434878789 * MVNDJSKFSDH234 + VASDTQ34GBFGH4W5TDFS.x - 1) / VASDTQ34GBFGH4W5TDFS.x; VE45TWERFVSRTY63453EGBGFHJ56Y.y = 1; VE45TWERFVSRTY63453EGBGFHJ56Y.z = 1; _V23W34O95UHJIDKLCHG<<<VE45TWERFVSRTY63453EGBGFHJ56Y,VASDTQ34GBFGH4W5TDFS>>>(thrust::raw_pointer_cast(&OREIO93405UJIDFKLSG23SAT[0]), nNBTJN5948NRFD, nVRTJGRFDGE3434878789 * MVNDJSKFSDH234);  VASDTQ34GBFGH4W5TDFS.x = 64; VASDTQ34GBFGH4W5TDFS.y = 16; VASDTQ34GBFGH4W5TDFS.z = 1; VE45TWERFVSRTY63453EGBGFHJ56Y.x = (nNBTJN5948NRFD + VASDTQ34GBFGH4W5TDFS.x - 1) / VASDTQ34GBFGH4W5TDFS.x; VE45TWERFVSRTY63453EGBGFHJ56Y.y = (MVNDJSKFSDH234 + VASDTQ34GBFGH4W5TDFS.y - 1) / VASDTQ34GBFGH4W5TDFS.y; VE45TWERFVSRTY63453EGBGFHJ56Y.z = 1; _MNCSDKLFNSWDFCVHZXCVKL345R345<<<VE45TWERFVSRTY63453EGBGFHJ56Y,VASDTQ34GBFGH4W5TDFS>>>(thrust::raw_pointer_cast(&OREIO93405UJIDFKLSG23SAT[0]), nVRTJGRFDGE3434878789,nNBTJN5948NRFD, MVNDJSKFSDH234); return OREIO93405UJIDFKLSG23SAT;  }   template<typename T> void __VS345456W3RGDFGH( cudaTextureObject_t& DFKLH389574TYHUDFQW4324, cudaArray* d_OREIO93405UJIDFKLSG23Array,  int VA45TWAFSDRT6Y34, int UIOYUJTR6879U5RTGHBNGJT, int ZZZXCVSADF345546, T* B34E5TEWRGB45TWEFSFG, cudaMemcpyKind VNASKJDFN30TUGIJOKDF, cudaTextureAddressMode addressMode, cudaTextureFilterMode _DSVF_234OITHJDFSN, cudaTextureReadMode DFKLHGDKJ8934YHJDFKRHIN2894, bool isNormalized) { cudaExtent OREIO93405UJIDFKLSG23Size; OREIO93405UJIDFKLSG23Size.width = VA45TWAFSDRT6Y34; OREIO93405UJIDFKLSG23Size.height = UIOYUJTR6879U5RTGHBNGJT; OREIO93405UJIDFKLSG23Size.depth = ZZZXCVSADF345546; cudaChannelFormatDesc channelDesc = cudaCreateChannelDesc<T>(); cudaMalloc3DArray(&d_OREIO93405UJIDFKLSG23Array, &channelDesc, OREIO93405UJIDFKLSG23Size); cudaMemcpy3DParms copyParams = {0}; copyParams.srcPtr = make_cudaPitchedPtr( (void*)B34E5TEWRGB45TWEFSFG, OREIO93405UJIDFKLSG23Size.width * sizeof(T), OREIO93405UJIDFKLSG23Size.width, OREIO93405UJIDFKLSG23Size.height); copyParams.dstArray = d_OREIO93405UJIDFKLSG23Array; copyParams.extent = OREIO93405UJIDFKLSG23Size; copyParams.kind = VNASKJDFN30TUGIJOKDF; cudaMemcpy3D(&copyParams); cudaResourceDesc resDesc; memset(&resDesc, 0, sizeof(resDesc)); resDesc.resType = cudaResourceTypeArray; resDesc.res.array.array = d_OREIO93405UJIDFKLSG23Array; cudaTextureDesc texDesc; memset(&texDesc, 0, sizeof(texDesc)); texDesc.addressMode[0] = addressMode; texDesc.addressMode[1] = addressMode; texDesc.addressMode[2] = addressMode; texDesc.filterMode = _DSVF_234OITHJDFSN; texDesc.readMode = DFKLHGDKJ8934YHJDFKRHIN2894;  texDesc.normalizedCoords = isNormalized; CUDA_SAFE_CALL(cudaCreateTextureObject(&DFKLH389574TYHUDFQW4324, &resDesc, &texDesc,nullptr)); }  void _CNXV834J9H0V34VNP9348Y(cudaTextureObject_t& DFKLH389574TYHUDFQW4324, cudaArray* XCKV4NOIWE840IOHDF) { cudaDestroyTextureObject(DFKLH389574TYHUDFQW4324); cudaFreeArray(XCKV4NOIWE840IOHDF);  }   template<KGFH5GDF3EFC Method> __global__ void _NSVDKLJFHG983Q4ASCKVH2894UWIO34( cudaTextureObject_t DFKLH389574TYHUDFQW4324, float* VNODSHF9483HUDFS, byte* __restrict__ NKLDFNGKJH5894HOGN34, float3* __restrict__ _B3N948EONUJAW45,  float3 s,  float DFKLGJR5NDFKERG2930572305743, float3 VMNXKCNQWE21353THG,  float dx, float dz,  float VBMNNDFGJIH5894, float MBNJTNOUBDNGI,  float2 M5480OGJIDNKLF567U5RTFG,  int3 VN,  int MVNDJSKFSDH234,  int BNUIOL7U6YRTGFHKI576)  {}    template<> __global__ void _NSVDKLJFHG983Q4ASCKVH2894UWIO34<BDRFGYUIP345>( cudaTextureObject_t DFKLH389574TYHUDFQW4324, float* VNODSHF9483HUDFS, byte* __restrict__ NKLDFNGKJH5894HOGN34, float3* __restrict__ _B3N948EONUJAW45, float3 s, float DFKLGJR5NDFKERG2930572305743, float3 curvox, float dx, float dz, float VBMNNDFGJIH5894, float MBNJTNOUBDNGI, float2 M5480OGJIDNKLF567U5RTFG, int3 VN, int MVNDJSKFSDH234, int BNUIOL7U6YRTGFHKI576) { int3 id; id.z = threadIdx.x + __umul24(blockIdx.x, blockDim.x);   id.x = threadIdx.y + __umul24(blockIdx.y, blockDim.y);   id.y = threadIdx.z + __umul24(blockIdx.z, blockDim.z);    if(id.x < VN.x && id.y < VN.y && id.z < VN.z) { if(NKLDFNGKJH5894HOGN34[id.y * VN.x + id.x] != 1) return;  curvox = (id - curvox) * make_float3(dx,dx,dz); float3 cursour;  float idxL, idxR, idxU, idxD;  float cosVal;  float summ = 0;   float3 cossin; float inv_sid = 1.0 /  sqrtf(s.x * s.x + s.y * s.y); float3 MBNGFKLNBORJFKV; float l_square; float l; float alpha; float deltaAlpha; DFKLGJR5NDFKERG2930572305743 = DFKLGJR5NDFKERG2930572305743 / MBNJTNOUBDNGI; VBMNNDFGJIH5894 = 1.0 / VBMNNDFGJIH5894; dz = dz * 0.5; for(int BNMFLGN3O4IHRNDFKLW3QP423Idx = 0; BNMFLGN3O4IHRNDFKLW3QP423Idx < MVNDJSKFSDH234; ++BNMFLGN3O4IHRNDFKLW3QP423Idx) { cossin = _B3N948EONUJAW45[BNMFLGN3O4IHRNDFKLW3QP423Idx]; cursour = make_float3( s.x * cossin.x - s.y * cossin.y, s.x * cossin.y + s.y * cossin.x, s.z + cossin.z);  MBNGFKLNBORJFKV = curvox - cursour; l_square = MBNGFKLNBORJFKV.x * MBNGFKLNBORJFKV.x + MBNGFKLNBORJFKV.y * MBNGFKLNBORJFKV.y; l = rsqrt(l_square); idxU = (MBNGFKLNBORJFKV.z + dz) * DFKLGJR5NDFKERG2930572305743 * l + M5480OGJIDNKLF567U5RTFG.y + 1;  idxD = (MBNGFKLNBORJFKV.z - dz) * DFKLGJR5NDFKERG2930572305743 * l + M5480OGJIDNKLF567U5RTFG.y + 1; alpha = asinf((cursour.y * MBNGFKLNBORJFKV.x - cursour.x * MBNGFKLNBORJFKV.y) * inv_sid * l);  if (fabsf(cursour.x) > fabsf(cursour.y)) { MBNJTNOUBDNGI = MBNGFKLNBORJFKV.x; } else { MBNJTNOUBDNGI = MBNGFKLNBORJFKV.y; } deltaAlpha = MBNJTNOUBDNGI / l_square * dx * 0.5; cosVal = dx / MBNJTNOUBDNGI * sqrtf(l_square + MBNGFKLNBORJFKV.z * MBNGFKLNBORJFKV.z); idxL = (alpha - deltaAlpha) * VBMNNDFGJIH5894 + M5480OGJIDNKLF567U5RTFG.x + 1; idxR = (alpha + deltaAlpha) * VBMNNDFGJIH5894 + M5480OGJIDNKLF567U5RTFG.x + 1;  summ += (   - tex3D<float>(DFKLH389574TYHUDFQW4324,idxD,idxR,BNMFLGN3O4IHRNDFKLW3QP423Idx + 0.5)   - tex3D<float>(DFKLH389574TYHUDFQW4324,idxU,idxL,BNMFLGN3O4IHRNDFKLW3QP423Idx + 0.5)   + tex3D<float>(DFKLH389574TYHUDFQW4324,idxD,idxL,BNMFLGN3O4IHRNDFKLW3QP423Idx + 0.5)   + tex3D<float>(DFKLH389574TYHUDFQW4324,idxU,idxR,BNMFLGN3O4IHRNDFKLW3QP423Idx + 0.5)) * cosVal; } __syncthreads(); VNODSHF9483HUDFS[__umul24((__umul24(id.y,VN.x) + id.x),VN.z) + id.z] = summ; } }    template<> __global__ void _NSVDKLJFHG983Q4ASCKVH2894UWIO34<VZXCQAWD43HRTGFHN6754EFSD>( cudaTextureObject_t DFKLH389574TYHUDFQW4324, float* VNODSHF9483HUDFS, byte* __restrict__ NKLDFNGKJH5894HOGN34, float3* __restrict__ _B3N948EONUJAW45, float3 s, float DFKLGJR5NDFKERG2930572305743, float3 VMNXKCNQWE21353THG, float dx, float dz, float VBMNNDFGJIH5894, float MBNJTNOUBDNGI, float2 M5480OGJIDNKLF567U5RTFG, int3 VN, int MVNDJSKFSDH234, int BNUIOL7U6YRTGFHKI576) { int k = __mul24(blockDim.x, blockIdx.x) + threadIdx.x; int i = __mul24(blockDim.y, blockIdx.y) + threadIdx.y; int j = __mul24(blockDim.z, blockIdx.z) + threadIdx.z;  if(i < VN.x && j < VN.y && k < VN.z) { if(NKLDFNGKJH5894HOGN34[j * VN.x + i] != 1) return; float3 curVox = make_float3( (i - VMNXKCNQWE21353THG.x) * dx, (j - VMNXKCNQWE21353THG.y) * dx, (k - VMNXKCNQWE21353THG.z) * dz); float3 MBNGFKLNBORJFKV; float3 cursour; float invsid = rsqrtf(s.x * s.x + s.y * s.y); float invl; float idxZ; float idxXY; float alpha; float cosVal; float3 cossinT; float summ = 0; DFKLGJR5NDFKERG2930572305743 = DFKLGJR5NDFKERG2930572305743 / MBNJTNOUBDNGI; VBMNNDFGJIH5894 = 1.0 / VBMNNDFGJIH5894; for(int BNMFLGN3O4IHRNDFKLW3QP423Idx = 0; BNMFLGN3O4IHRNDFKLW3QP423Idx != MVNDJSKFSDH234; ++BNMFLGN3O4IHRNDFKLW3QP423Idx) { cossinT = _B3N948EONUJAW45[BNMFLGN3O4IHRNDFKLW3QP423Idx]; cursour = make_float3( s.x * cossinT.x - s.y * cossinT.y, s.x * cossinT.y + s.y * cossinT.x, s.z + cossinT.z); MBNGFKLNBORJFKV = curVox - cursour; MBNJTNOUBDNGI = MBNGFKLNBORJFKV.x * MBNGFKLNBORJFKV.x + MBNGFKLNBORJFKV.y * MBNGFKLNBORJFKV.y; invl = rsqrtf(MBNJTNOUBDNGI); idxZ = MBNGFKLNBORJFKV.z * DFKLGJR5NDFKERG2930572305743 * invl + M5480OGJIDNKLF567U5RTFG.y + 0.5; alpha = asinf((cursour.y * MBNGFKLNBORJFKV.x - cursour.x * MBNGFKLNBORJFKV.y) * invl * invsid); if(fabsf(cursour.x) >= fabsf(cursour.y)) { cosVal = fabsf(1.0 / MBNGFKLNBORJFKV.x); } else { cosVal = fabsf(1.0 / MBNGFKLNBORJFKV.y); } cosVal *= (dx * sqrtf(MBNJTNOUBDNGI + MBNGFKLNBORJFKV.z * MBNGFKLNBORJFKV.z)); idxXY = alpha * VBMNNDFGJIH5894 + M5480OGJIDNKLF567U5RTFG.x + 0.5; summ += tex3D<float>(DFKLH389574TYHUDFQW4324, idxZ, idxXY, BNMFLGN3O4IHRNDFKLW3QP423Idx + 0.5f) * cosVal; } __syncthreads(); VNODSHF9483HUDFS[(j * VN.x + i) * VN.z + k] = summ; } }   template<> __global__ void _NSVDKLJFHG983Q4ASCKVH2894UWIO34<QASCFG54EDFGHJ>( cudaTextureObject_t DFKLH389574TYHUDFQW4324, float* VNODSHF9483HUDFS, byte* __restrict__ NKLDFNGKJH5894HOGN34, float3* __restrict__ _B3N948EONUJAW45, float3 s, float DFKLGJR5NDFKERG2930572305743, float3 VMNXKCNQWE21353THG, float dx, float dz, float VBMNNDFGJIH5894, float MBNJTNOUBDNGI, float2 M5480OGJIDNKLF567U5RTFG, int3 VN, int MVNDJSKFSDH234, int BNUIOL7U6YRTGFHKI576) { int idx = threadIdx.x + __umul24(blockIdx.x, blockDim.x); int idy = threadIdx.y + __umul24(blockIdx.y, blockDim.y); __shared__ float summ[4][8][16 + 1];  
#pragma unroll 
for(int i = 0; i <= 16; ++i) { summ[threadIdx.y][threadIdx.x][i] = 0; } __syncthreads(); if(idx < VN.x && idy < VN.y) { if(NKLDFNGKJH5894HOGN34[idy * VN.x + idx] != 1) return; float curBNMFLGN3O4IHRNDFKLW3QP423(0); float2 MBNGFKLNBORJFKVlft, MBNGFKLNBORJFKVrgh;  float3 cursour; float idxL, idxR, idxD; float cosVal = 1.0;  float2 curvox_xy = make_float2((idx - VMNXKCNQWE21353THG.x) * dx, (idy - VMNXKCNQWE21353THG.y) * dx); float2 MBNGFKLNBORJFKVxy;  int LPs = VN.z >> 4; float MBNGFKLNBORJFKVZ;  float minObj = 0; float s2vlength = 0; float3 cossinT; DFKLGJR5NDFKERG2930572305743 = DFKLGJR5NDFKERG2930572305743 / MBNJTNOUBDNGI; VBMNNDFGJIH5894 = 1.0 / VBMNNDFGJIH5894; float invSID = rsqrtf(s.x * s.x + s.y * s.y); for(int lDKLFOISRTUDFKLJGH348957REWGSGF = 0; lDKLFOISRTUDFKLJGH348957REWGSGF != LPs; ++lDKLFOISRTUDFKLJGH348957REWGSGF)  { minObj = (- VMNXKCNQWE21353THG.z + lDKLFOISRTUDFKLJGH348957REWGSGF * 16) * dz ; for(int BNMFLGN3O4IHRNDFKLW3QP423Idx = 0; BNMFLGN3O4IHRNDFKLW3QP423Idx < MVNDJSKFSDH234; ++BNMFLGN3O4IHRNDFKLW3QP423Idx) { cossinT = _B3N948EONUJAW45[BNMFLGN3O4IHRNDFKLW3QP423Idx];  cursour = make_float3( s.x * cossinT.x - s.y * cossinT.y, s.x * cossinT.y + s.y * cossinT.x, s.z + cossinT.z); MBNGFKLNBORJFKVxy.x = curvox_xy.x - cursour.x; MBNGFKLNBORJFKVxy.y = curvox_xy.y - cursour.y; s2vlength = hypotf(MBNGFKLNBORJFKVxy.x, MBNGFKLNBORJFKVxy.y); if(fabsf(cossinT.x) <= fabsf(cossinT.y)) { MBNGFKLNBORJFKVlft = normalize(make_float2(MBNGFKLNBORJFKVxy.x, MBNGFKLNBORJFKVxy.y - 0.5 * dx)); MBNGFKLNBORJFKVrgh = normalize(make_float2(MBNGFKLNBORJFKVxy.x, MBNGFKLNBORJFKVxy.y + 0.5 * dx)); cosVal = (dx * s2vlength / MBNGFKLNBORJFKVxy.x);  } else { MBNGFKLNBORJFKVlft = normalize(make_float2(MBNGFKLNBORJFKVxy.x + 0.5f * dx, MBNGFKLNBORJFKVxy.y)); MBNGFKLNBORJFKVrgh = normalize(make_float2(MBNGFKLNBORJFKVxy.x - 0.5f * dx, MBNGFKLNBORJFKVxy.y)); cosVal = (dx * s2vlength / MBNGFKLNBORJFKVxy.y); }  idxL = asinf((cursour.y * MBNGFKLNBORJFKVlft.x - cursour.x * MBNGFKLNBORJFKVlft.y) * invSID) * VBMNNDFGJIH5894 + M5480OGJIDNKLF567U5RTFG.x + 1; idxR = asinf((cursour.y * MBNGFKLNBORJFKVrgh.x - cursour.x * MBNGFKLNBORJFKVrgh.y) * invSID) * VBMNNDFGJIH5894 + M5480OGJIDNKLF567U5RTFG.x + 1;   curBNMFLGN3O4IHRNDFKLW3QP423 = DFKLGJR5NDFKERG2930572305743 / s2vlength; 
#pragma unroll 
for(int idz = 0; idz <= 16; ++idz) { MBNGFKLNBORJFKVZ = minObj + idz * dz - cursour.z; MBNJTNOUBDNGI = hypotf(MBNGFKLNBORJFKVZ,s2vlength) / s2vlength; idxD = (MBNGFKLNBORJFKVZ - 0.5 * dz) * curBNMFLGN3O4IHRNDFKLW3QP423 + M5480OGJIDNKLF567U5RTFG.y + 1; summ[threadIdx.y][threadIdx.x][idz] += (tex3D<float>(DFKLH389574TYHUDFQW4324,idxD,idxR,BNMFLGN3O4IHRNDFKLW3QP423Idx + 0.5) -  tex3D<float>(DFKLH389574TYHUDFQW4324,idxD,idxL,BNMFLGN3O4IHRNDFKLW3QP423Idx + 0.5)) * cosVal * MBNJTNOUBDNGI; } } __syncthreads();  int vIdx = (idy * VN.x + idx) * VN.z + (lDKLFOISRTUDFKLJGH348957REWGSGF << 4); 
#pragma unroll 
for(int idz = 0; idz < 16; ++idz) { VNODSHF9483HUDFS[vIdx + idz] = summ[threadIdx.y][threadIdx.x][idz + 1] - summ[threadIdx.y][threadIdx.x][idz]; summ[threadIdx.y][threadIdx.x][idz] = 0; } summ[threadIdx.y][threadIdx.x][16] = 0; __syncthreads(); } } }     template<KGFH5GDF3EFC Method> void DD3_gpu_back( float NJU8765TGHJKO987YGH, float VCVCVDF34ASDFQ2, float OPYURTOI56890, int VRTJGRFDGE3434878789, int NBTJN5948NRFD, float* XCV423FEDFV, float* BVHTY654RGBGNH, float* V345THBSD, float imgXCenter, float imgYCenter, float imgZCenter, float* hBNMFLGN3O4IHRNDFKLW3QP423s, float* hzPos, int MVNDJSKFSDH234, int XN, int YN, int XCZNVKJR23SDF, float* hVNODSHF9483HUDFS, float* hOREIO93405UJIDFKLSG23, float dx, float dz, byte* mask,int BNUIOL7U6YRTGFHKI576, int gpunum) { CUDA_CHECK_RETURN(cudaSetDevice(gpunum)); CUDA_CHECK_RETURN(cudaDeviceReset());  float3 VMNXKCNQWE21353THG = make_float3( (XN - 1.0) * 0.5 - imgXCenter / dx, (YN - 1.0) * 0.5 - imgYCenter / dx, (XCZNVKJR23SDF - 1.0) * 0.5 - imgZCenter / dz); float3 sour = make_float3(NJU8765TGHJKO987YGH, VCVCVDF34ASDFQ2, OPYURTOI56890); thrust::device_vector<byte> NKLDFNGKJH5894HOGN34(mask,mask + XN * YN); thrust::device_vector<float> VNODSHF9483HUDFS(XN * YN * XCZNVKJR23SDF, 0); const float DFKLGJR5NDFKERG2930572305743 = hypotf(XCV423FEDFV[0] - NJU8765TGHJKO987YGH, BVHTY654RGBGNH[0] - VCVCVDF34ASDFQ2);  thrust::device_vector<float3> _B3N948EONUJAW45(MVNDJSKFSDH234); thrust::device_vector<float> BNMFLGN3O4IHRNDFKLW3QP423s(hBNMFLGN3O4IHRNDFKLW3QP423s,hBNMFLGN3O4IHRNDFKLW3QP423s + MVNDJSKFSDH234); thrust::device_vector<float> zPos(hzPos, hzPos + MVNDJSKFSDH234); thrust::transform( thrust::make_zip_iterator(thrust::make_tuple(BNMFLGN3O4IHRNDFKLW3QP423s.begin(),zPos.begin())), thrust::make_zip_iterator(thrust::make_tuple(BNMFLGN3O4IHRNDFKLW3QP423s.end(),  zPos.end())), _B3N948EONUJAW45.begin(), CTMBIR::ConstantForBackProjection<float>(NJU8765TGHJKO987YGH,VCVCVDF34ASDFQ2,OPYURTOI56890));    float4 detParas = calDetParas(XCV423FEDFV, BVHTY654RGBGNH, V345THBSD, NJU8765TGHJKO987YGH, VCVCVDF34ASDFQ2, OPYURTOI56890, VRTJGRFDGE3434878789, NBTJN5948NRFD);  cudaArray *d_OREIO93405UJIDFKLSG23Array = nullptr; cudaTextureObject_t DFKLH389574TYHUDFQW4324; dim3 NDFKLJBH893THUIDF; dim3 VNERG8945HUBNJKFG35768IYUTJHRE; thrust::device_vector<float> OREIO93405UJIDFKLSG23SAT;   switch(Method) { case VZXCQAWD43HRTGFHN6754EFSD:  __VS345456W3RGDFGH<float>(DFKLH389574TYHUDFQW4324,d_OREIO93405UJIDFKLSG23Array,NBTJN5948NRFD,VRTJGRFDGE3434878789,MVNDJSKFSDH234,hOREIO93405UJIDFKLSG23,cudaMemcpyHostToDevice, cudaAddressModeBorder,cudaFilterModeLinear,cudaReadModeElementType, false); NDFKLJBH893THUIDF.x = VNJSD38VV; NDFKLJBH893THUIDF.y = VSER23RTY5Z; NDFKLJBH893THUIDF.z = BVN54VBSF; VNERG8945HUBNJKFG35768IYUTJHRE.x = (XCZNVKJR23SDF + NDFKLJBH893THUIDF.x - 1) / NDFKLJBH893THUIDF.x; VNERG8945HUBNJKFG35768IYUTJHRE.y = (XN + NDFKLJBH893THUIDF.y - 1) / NDFKLJBH893THUIDF.y; VNERG8945HUBNJKFG35768IYUTJHRE.z = (YN + NDFKLJBH893THUIDF.z - 1) / NDFKLJBH893THUIDF.z; break; case BDRFGYUIP345: OREIO93405UJIDFKLSG23SAT = ___KLDFGJGSDFGSDFNDGGS(hOREIO93405UJIDFKLSG23, VRTJGRFDGE3434878789, NBTJN5948NRFD, MVNDJSKFSDH234); __VS345456W3RGDFGH<float>(DFKLH389574TYHUDFQW4324,d_OREIO93405UJIDFKLSG23Array,NBTJN5948NRFD + 1,VRTJGRFDGE3434878789 + 1,MVNDJSKFSDH234, thrust::raw_pointer_cast(&OREIO93405UJIDFKLSG23SAT[0]), cudaMemcpyDeviceToDevice, cudaAddressModeClamp,cudaFilterModeLinear,cudaReadModeElementType, false); OREIO93405UJIDFKLSG23SAT.clear();  NDFKLJBH893THUIDF.x = VNJSD38VV; NDFKLJBH893THUIDF.y = VSER23RTY5Z; NDFKLJBH893THUIDF.z = BVN54VBSF; VNERG8945HUBNJKFG35768IYUTJHRE.x = (XCZNVKJR23SDF + NDFKLJBH893THUIDF.x - 1) / NDFKLJBH893THUIDF.x; VNERG8945HUBNJKFG35768IYUTJHRE.y = (XN + NDFKLJBH893THUIDF.y - 1) / NDFKLJBH893THUIDF.y; VNERG8945HUBNJKFG35768IYUTJHRE.z = (YN + NDFKLJBH893THUIDF.z - 1) / NDFKLJBH893THUIDF.z; break; case QASCFG54EDFGHJ: OREIO93405UJIDFKLSG23SAT = ___KLDFGJGSDFGSDFNDGGS(hOREIO93405UJIDFKLSG23, VRTJGRFDGE3434878789, NBTJN5948NRFD, MVNDJSKFSDH234); __VS345456W3RGDFGH<float>(DFKLH389574TYHUDFQW4324,d_OREIO93405UJIDFKLSG23Array,NBTJN5948NRFD + 1,VRTJGRFDGE3434878789 + 1,MVNDJSKFSDH234, thrust::raw_pointer_cast(&OREIO93405UJIDFKLSG23SAT[0]), cudaMemcpyDeviceToDevice, cudaAddressModeClamp,cudaFilterModeLinear,cudaReadModeElementType, false); OREIO93405UJIDFKLSG23SAT.clear(); NDFKLJBH893THUIDF.x = 8; NDFKLJBH893THUIDF.y = 4; NDFKLJBH893THUIDF.z = 1; VNERG8945HUBNJKFG35768IYUTJHRE.x = (XN + NDFKLJBH893THUIDF.x - 1) / NDFKLJBH893THUIDF.x; VNERG8945HUBNJKFG35768IYUTJHRE.y = (YN + NDFKLJBH893THUIDF.y - 1) / NDFKLJBH893THUIDF.y; break; }  _NSVDKLJFHG983Q4ASCKVH2894UWIO34<Method><<<VNERG8945HUBNJKFG35768IYUTJHRE,NDFKLJBH893THUIDF>>>(DFKLH389574TYHUDFQW4324, thrust::raw_pointer_cast(&VNODSHF9483HUDFS[0]), thrust::raw_pointer_cast(&NKLDFNGKJH5894HOGN34[0]), thrust::raw_pointer_cast(&_B3N948EONUJAW45[0]), sour, DFKLGJR5NDFKERG2930572305743, VMNXKCNQWE21353THG, dx, dz, detParas.z, detParas.w, make_float2(detParas.x, detParas.y), make_int3(XN, YN, XCZNVKJR23SDF), MVNDJSKFSDH234,static_cast<int>(BNUIOL7U6YRTGFHKI576!=0));  thrust::copy(VNODSHF9483HUDFS.begin(),VNODSHF9483HUDFS.end(),hVNODSHF9483HUDFS); _CNXV834J9H0V34VNP9348Y(DFKLH389574TYHUDFQW4324, d_OREIO93405UJIDFKLSG23Array);  VNODSHF9483HUDFS.clear(); NKLDFNGKJH5894HOGN34.clear(); BNMFLGN3O4IHRNDFKLW3QP423s.clear(); zPos.clear(); _B3N948EONUJAW45.clear(); }     __host__ __device__ const double2 operator/(const double2& a, double b) { return make_double2(a.x / b ,a.y / b); }  __host__ __device__ double length(const double2& a) { return sqrt(a.x * a.x + a.y * a.y); }  __host__ __device__ const double2 normalize(const double2& a) { return a / length(a); }   template<typename T1, typename T2> void BVMNSERKJHT8934PHNBJHQ02IODS(int VN9345HGONJDF234T5TRGSAFQER1Q,  T1 *BVNMKLTNG5894HBNJD,  T2 *BMNSKOLDFG0934UTJIRKELF) {   int i;   if (VN9345HGONJDF234T5TRGSAFQER1Q >= 3)     {     *BMNSKOLDFG0934UTJIRKELF++ = 1.5 * *BVNMKLTNG5894HBNJD - 0.5 * *(BVNMKLTNG5894HBNJD+1);     for (i=1 ; i<=(VN9345HGONJDF234T5TRGSAFQER1Q-2) ; i++)       {                *BMNSKOLDFG0934UTJIRKELF++ = 0.5 * *BVNMKLTNG5894HBNJD + 0.5 * *(BVNMKLTNG5894HBNJD+1);                BVNMKLTNG5894HBNJD++;       }     *BMNSKOLDFG0934UTJIRKELF = 1.5 * *BVNMKLTNG5894HBNJD - 0.5 * *(BVNMKLTNG5894HBNJD-1);     }   else     {       *BMNSKOLDFG0934UTJIRKELF = *BVNMKLTNG5894HBNJD-0.5;       *(BMNSKOLDFG0934UTJIRKELF+1) = *BVNMKLTNG5894HBNJD+0.5;     } }   double4 VNAEGFKLJN893HIOGNAFSDFQ23(float* XCV423FEDFV, float* BVHTY654RGBGNH, float* V345THBSD,float NJU8765TGHJKO987YGH, float VCVCVDF34ASDFQ2, float OPYURTOI56890, int VRTJGRFDGE3434878789, int NBTJN5948NRFD) { double* bXCV423FEDFV = new double[VRTJGRFDGE3434878789 + 1]; double* bBVHTY654RGBGNH = new double[VRTJGRFDGE3434878789 + 1]; double* bV345THBSD = new double[NBTJN5948NRFD + 1];  BVMNSERKJHT8934PHNBJHQ02IODS<float, double>(VRTJGRFDGE3434878789 + 1, XCV423FEDFV, bXCV423FEDFV); BVMNSERKJHT8934PHNBJHQ02IODS<float, double>(VRTJGRFDGE3434878789 + 1, BVHTY654RGBGNH, bBVHTY654RGBGNH); BVMNSERKJHT8934PHNBJHQ02IODS<float, double>(NBTJN5948NRFD + 1, V345THBSD, bV345THBSD); double MBNJTNOUBDNGI = (bV345THBSD[NBTJN5948NRFD] - bV345THBSD[0]) / NBTJN5948NRFD; double TYOUIORT890 = (-(bV345THBSD[0] - OPYURTOI56890) / MBNJTNOUBDNGI) - 0.5;  double2 MBNGFKLNBORJFKV  = normalize(make_double2(-NJU8765TGHJKO987YGH, -VCVCVDF34ASDFQ2));  double2 MBNGFKLNBORJFKVL = normalize(make_double2(bXCV423FEDFV[0] - NJU8765TGHJKO987YGH, bBVHTY654RGBGNH[0] - VCVCVDF34ASDFQ2));  double2 MBNGFKLNBORJFKVR = normalize(make_double2(bXCV423FEDFV[VRTJGRFDGE3434878789] - NJU8765TGHJKO987YGH, bBVHTY654RGBGNH[VRTJGRFDGE3434878789] - VCVCVDF34ASDFQ2 ));  double VBMNNDFGJIH5894 = asin(MBNGFKLNBORJFKVL.x * MBNGFKLNBORJFKVR.y - MBNGFKLNBORJFKVL.y * MBNGFKLNBORJFKVR.x) / VRTJGRFDGE3434878789;  double MNKHYJHIHJRIJUTG = asin(MBNGFKLNBORJFKV.x * MBNGFKLNBORJFKVL.y - MBNGFKLNBORJFKV.y * MBNGFKLNBORJFKVL.x);  double FKIGEORTU45906DFKLJ = -MNKHYJHIHJRIJUTG / VBMNNDFGJIH5894 - 0.5;  delete[] bXCV423FEDFV; delete[] bBVHTY654RGBGNH; delete[] bV345THBSD; return make_double4(FKIGEORTU45906DFKLJ, TYOUIORT890, VBMNNDFGJIH5894, MBNJTNOUBDNGI); }    __global__ void __VFBNKLSDNFG93Q04OGJIDNFKLZADSF (double* WERERY546ERPO6ERG5E, double* BNDOGJISDFQWQWE23, int VRTJGRFDGE3434878789, int NBTJN5948NRFD, int MVNDJSKFSDH234) { int CMVNDSFKJGBH34OIHFSD = threadIdx.x + blockIdx.x * blockDim.x; int VBMNSDKJFWE6789GFR56 = threadIdx.y + blockIdx.y * blockDim.y; int BNMFLGN3O4IHRNDFKLW3QP423 = threadIdx.z + blockIdx.z * blockDim.z; if(VBMNSDKJFWE6789GFR56 < VRTJGRFDGE3434878789 && CMVNDSFKJGBH34OIHFSD < NBTJN5948NRFD && BNMFLGN3O4IHRNDFKLW3QP423 < MVNDJSKFSDH234) { int i = (BNMFLGN3O4IHRNDFKLW3QP423 * VRTJGRFDGE3434878789 + VBMNSDKJFWE6789GFR56) * NBTJN5948NRFD + CMVNDSFKJGBH34OIHFSD; int ni = (BNMFLGN3O4IHRNDFKLW3QP423 * (VRTJGRFDGE3434878789 + 1) + (VBMNSDKJFWE6789GFR56 + 1)) * (NBTJN5948NRFD + 1) + (CMVNDSFKJGBH34OIHFSD + 1); BNDOGJISDFQWQWE23[ni] = WERERY546ERPO6ERG5E[i]; } }   __global__ void _V23W34O95UHJIDKLCHG(double* OREIO93405UJIDFKLSG23, int XCZNVKJR23SDF, int N) { int idx = threadIdx.x + blockIdx.x * blockDim.x; if(idx < N) { int VMRGNK5940JOTGIDFK = idx * XCZNVKJR23SDF; for(int VDNSRFKLVNKL3KLJG9340UERIGKLJ = 1; VDNSRFKLVNKL3KLJG9340UERIGKLJ < XCZNVKJR23SDF; ++VDNSRFKLVNKL3KLJG9340UERIGKLJ) { OREIO93405UJIDFKLSG23[VMRGNK5940JOTGIDFK + VDNSRFKLVNKL3KLJG9340UERIGKLJ] = OREIO93405UJIDFKLSG23[VMRGNK5940JOTGIDFK + VDNSRFKLVNKL3KLJG9340UERIGKLJ] + OREIO93405UJIDFKLSG23[VMRGNK5940JOTGIDFK + VDNSRFKLVNKL3KLJG9340UERIGKLJ - 1]; } } }   __global__ void _MNCSDKLFNSWDFCVHZXCVKL345R345(double* OREIO93405UJIDFKLSG23, int VRTJGRFDGE3434878789, int NBTJN5948NRFD, int MVNDJSKFSDH234) { int CMVNDSFKJGBH34OIHFSD = threadIdx.x + blockIdx.x * blockDim.x; int DKLFOISRTUDFKLJGH348957REWGSGF = threadIdx.y + blockIdx.y * blockDim.y; if (CMVNDSFKJGBH34OIHFSD < NBTJN5948NRFD && DKLFOISRTUDFKLJGH348957REWGSGF < MVNDJSKFSDH234) { int IERYIOERTI345DFCG = DKLFOISRTUDFKLJGH348957REWGSGF * VRTJGRFDGE3434878789 * NBTJN5948NRFD + CMVNDSFKJGBH34OIHFSD; for(int VDNSRFKLVNKL3KLJG9340UERIGKLJ = 1; VDNSRFKLVNKL3KLJG9340UERIGKLJ < VRTJGRFDGE3434878789; ++VDNSRFKLVNKL3KLJG9340UERIGKLJ) { OREIO93405UJIDFKLSG23[IERYIOERTI345DFCG + VDNSRFKLVNKL3KLJG9340UERIGKLJ * NBTJN5948NRFD] = OREIO93405UJIDFKLSG23[IERYIOERTI345DFCG + VDNSRFKLVNKL3KLJG9340UERIGKLJ * NBTJN5948NRFD] + OREIO93405UJIDFKLSG23[IERYIOERTI345DFCG + (VDNSRFKLVNKL3KLJG9340UERIGKLJ - 1) * NBTJN5948NRFD]; } } }  struct _V03Q48NVDC93048GF {  __device__ int2 operator()(double a) const { return make_int2(__double2loint(a), __double2hiint(a)); } }; thrust::device_vector<int2> ___KLDFGJGSDFGSDFNDGGS_Double( const float* const hOREIO93405UJIDFKLSG23,  int VRTJGRFDGE3434878789, int NBTJN5948NRFD,  int MVNDJSKFSDH234)   { const int siz = VRTJGRFDGE3434878789 * NBTJN5948NRFD * MVNDJSKFSDH234; const int MBVKLDRHFJE345DFKL54 = (VRTJGRFDGE3434878789 + 1) * (NBTJN5948NRFD + 1) * MVNDJSKFSDH234; thrust::device_vector<double> OREIO93405UJIDFKLSG23SAT(MBVKLDRHFJE345DFKL54, 0);  thrust::device_vector<double> OREIO93405UJIDFKLSG23(hOREIO93405UJIDFKLSG23, hOREIO93405UJIDFKLSG23 + siz);  dim3 VASDTQ34GBFGH4W5TDFS(64,16,1); dim3 VE45TWERFVSRTY63453EGBGFHJ56Y( (NBTJN5948NRFD + VASDTQ34GBFGH4W5TDFS.x - 1) / VASDTQ34GBFGH4W5TDFS.x, (VRTJGRFDGE3434878789 + VASDTQ34GBFGH4W5TDFS.y - 1) / VASDTQ34GBFGH4W5TDFS.y, (MVNDJSKFSDH234 + VASDTQ34GBFGH4W5TDFS.z - 1) / VASDTQ34GBFGH4W5TDFS.z); __VFBNKLSDNFG93Q04OGJIDNFKLZADSF<<<VE45TWERFVSRTY63453EGBGFHJ56Y,VASDTQ34GBFGH4W5TDFS>>>( thrust::raw_pointer_cast(&OREIO93405UJIDFKLSG23[0]), thrust::raw_pointer_cast(&OREIO93405UJIDFKLSG23SAT[0]), VRTJGRFDGE3434878789, NBTJN5948NRFD, MVNDJSKFSDH234); const int nVRTJGRFDGE3434878789 = VRTJGRFDGE3434878789 + 1; const int nNBTJN5948NRFD = NBTJN5948NRFD + 1;   VASDTQ34GBFGH4W5TDFS.x = 512; VASDTQ34GBFGH4W5TDFS.y = 1; VASDTQ34GBFGH4W5TDFS.z = 1; VE45TWERFVSRTY63453EGBGFHJ56Y.x = (nVRTJGRFDGE3434878789 * MVNDJSKFSDH234 + VASDTQ34GBFGH4W5TDFS.x - 1) / VASDTQ34GBFGH4W5TDFS.x; VE45TWERFVSRTY63453EGBGFHJ56Y.y = 1; VE45TWERFVSRTY63453EGBGFHJ56Y.z = 1; _V23W34O95UHJIDKLCHG<<<VE45TWERFVSRTY63453EGBGFHJ56Y,VASDTQ34GBFGH4W5TDFS>>>(thrust::raw_pointer_cast(&OREIO93405UJIDFKLSG23SAT[0]), nNBTJN5948NRFD, nVRTJGRFDGE3434878789 * MVNDJSKFSDH234);  VASDTQ34GBFGH4W5TDFS.x = 64; VASDTQ34GBFGH4W5TDFS.y = 16; VASDTQ34GBFGH4W5TDFS.z = 1; VE45TWERFVSRTY63453EGBGFHJ56Y.x = (nNBTJN5948NRFD + VASDTQ34GBFGH4W5TDFS.x - 1) / VASDTQ34GBFGH4W5TDFS.x; VE45TWERFVSRTY63453EGBGFHJ56Y.y = (MVNDJSKFSDH234 + VASDTQ34GBFGH4W5TDFS.y - 1) / VASDTQ34GBFGH4W5TDFS.y; VE45TWERFVSRTY63453EGBGFHJ56Y.z = 1; _MNCSDKLFNSWDFCVHZXCVKL345R345<<<VE45TWERFVSRTY63453EGBGFHJ56Y,VASDTQ34GBFGH4W5TDFS>>>(thrust::raw_pointer_cast(&OREIO93405UJIDFKLSG23SAT[0]), nVRTJGRFDGE3434878789,nNBTJN5948NRFD, MVNDJSKFSDH234); OREIO93405UJIDFKLSG23.clear(); thrust::device_vector<int2> OREIO93405UJIDFKLSG23SATInt(MBVKLDRHFJE345DFKL54); thrust::transform(OREIO93405UJIDFKLSG23SAT.begin(), OREIO93405UJIDFKLSG23SAT.end(), OREIO93405UJIDFKLSG23SATInt.begin(), _V03Q48NVDC93048GF()); OREIO93405UJIDFKLSG23SAT.clear(); return OREIO93405UJIDFKLSG23SATInt;  }   __host__ __device__ const double3 operator*(const double3& a,const double3& b) { return make_double3(a.x * b.x ,a.y * b.y, a.z * b.z); }   __host__ __device__ const double3 operator-(const int3& a,const double3& b) { return make_double3(a.x - b.x ,a.y - b.y, a.z - b.z); }  __global__ void _NSVDKLJFHG983Q4ASCKVH2894UWIO34_double( cudaTextureObject_t DFKLH389574TYHUDFQW4324, double* VNODSHF9483HUDFS, byte* __restrict__ NKLDFNGKJH5894HOGN34, double3* __restrict__ _B3N948EONUJAW45, double3 s, double DFKLGJR5NDFKERG2930572305743, double3 curvox, double dx, double dz, double VBMNNDFGJIH5894, double MBNJTNOUBDNGI, double2 M5480OGJIDNKLF567U5RTFG, int3 VN, int MVNDJSKFSDH234, int BNUIOL7U6YRTGFHKI576) { int3 id; id.z = threadIdx.x + __umul24(blockIdx.x, blockDim.x);  id.x = threadIdx.y + __umul24(blockIdx.y, blockDim.y);  id.y = threadIdx.z + __umul24(blockIdx.z, blockDim.z);   if(id.x < VN.x && id.y < VN.y && id.z < VN.z) { if(NKLDFNGKJH5894HOGN34[id.y * VN.x + id.x] != 1) return;  curvox = (id - curvox) * make_double3(dx,dx,dz); double3 cursour;  double idxL, idxR, idxU, idxD;  double cosVal;  double summ = 0;   double3 cossin; double inv_sid = 1.0 /  sqrt(s.x * s.x + s.y * s.y); double3 MBNGFKLNBORJFKV; double l_square; double l; double alpha;  double deltaAlpha; DFKLGJR5NDFKERG2930572305743 = DFKLGJR5NDFKERG2930572305743 / MBNJTNOUBDNGI; VBMNNDFGJIH5894 = 1.0 / VBMNNDFGJIH5894; dz = dz * 0.5;  int cidxU, fidxU, cidxD, fidxD, cidxL, fidxL, cidxR, fidxR; for(int BNMFLGN3O4IHRNDFKLW3QP423Idx = 0; BNMFLGN3O4IHRNDFKLW3QP423Idx < MVNDJSKFSDH234; ++BNMFLGN3O4IHRNDFKLW3QP423Idx) { cossin = _B3N948EONUJAW45[BNMFLGN3O4IHRNDFKLW3QP423Idx]; cursour = make_double3( s.x * cossin.x - s.y * cossin.y, s.x * cossin.y + s.y * cossin.x, s.z + cossin.z);  MBNGFKLNBORJFKV = curvox - cursour; l_square = MBNGFKLNBORJFKV.x * MBNGFKLNBORJFKV.x + MBNGFKLNBORJFKV.y * MBNGFKLNBORJFKV.y; l = rsqrt(l_square); idxU = (MBNGFKLNBORJFKV.z + dz) * DFKLGJR5NDFKERG2930572305743 * l + M5480OGJIDNKLF567U5RTFG.y + 1;  idxD = (MBNGFKLNBORJFKV.z - dz) * DFKLGJR5NDFKERG2930572305743 * l + M5480OGJIDNKLF567U5RTFG.y + 1; alpha = asin((cursour.y * MBNGFKLNBORJFKV.x - cursour.x * MBNGFKLNBORJFKV.y) * inv_sid * l);  if (fabs(cursour.x) > fabs(cursour.y)) { MBNJTNOUBDNGI = MBNGFKLNBORJFKV.x; } else { MBNJTNOUBDNGI = MBNGFKLNBORJFKV.y; } deltaAlpha = MBNJTNOUBDNGI / l_square * dx * 0.5; cosVal = dx / MBNJTNOUBDNGI * sqrt(l_square + MBNGFKLNBORJFKV.z * MBNGFKLNBORJFKV.z); idxL = (alpha - deltaAlpha) * VBMNNDFGJIH5894 + M5480OGJIDNKLF567U5RTFG.x + 1; idxR = (alpha + deltaAlpha) * VBMNNDFGJIH5894 + M5480OGJIDNKLF567U5RTFG.x + 1;  cidxU = ceil(idxU); fidxU = floor(idxU); cidxD = ceil(idxD); fidxD = floor(idxD); cidxL = ceil(idxL); fidxL = floor(idxL); cidxR = ceil(idxR); fidxR = floor(idxR);  summ += (   - (bilerp(tex3D<int2>(DFKLH389574TYHUDFQW4324, fidxD, fidxR, BNMFLGN3O4IHRNDFKLW3QP423Idx + 0.5),     tex3D<int2>(DFKLH389574TYHUDFQW4324, fidxD, cidxR, BNMFLGN3O4IHRNDFKLW3QP423Idx + 0.5),     tex3D<int2>(DFKLH389574TYHUDFQW4324, cidxD, fidxR, BNMFLGN3O4IHRNDFKLW3QP423Idx + 0.5),     tex3D<int2>(DFKLH389574TYHUDFQW4324, cidxD, cidxR, BNMFLGN3O4IHRNDFKLW3QP423Idx + 0.5),     idxR - fidxR, idxD - fidxD))   - (bilerp(tex3D<int2>(DFKLH389574TYHUDFQW4324, fidxU, fidxL, BNMFLGN3O4IHRNDFKLW3QP423Idx + 0.5),     tex3D<int2>(DFKLH389574TYHUDFQW4324, fidxU, cidxL, BNMFLGN3O4IHRNDFKLW3QP423Idx + 0.5),     tex3D<int2>(DFKLH389574TYHUDFQW4324, cidxU, fidxL, BNMFLGN3O4IHRNDFKLW3QP423Idx + 0.5),     tex3D<int2>(DFKLH389574TYHUDFQW4324, cidxU, cidxL, BNMFLGN3O4IHRNDFKLW3QP423Idx + 0.5),     idxL - fidxL, idxU - fidxU))   + (bilerp(tex3D<int2>(DFKLH389574TYHUDFQW4324, fidxD, fidxL, BNMFLGN3O4IHRNDFKLW3QP423Idx + 0.5),     tex3D<int2>(DFKLH389574TYHUDFQW4324, fidxD, cidxL, BNMFLGN3O4IHRNDFKLW3QP423Idx + 0.5),     tex3D<int2>(DFKLH389574TYHUDFQW4324, cidxD, fidxL, BNMFLGN3O4IHRNDFKLW3QP423Idx + 0.5),     tex3D<int2>(DFKLH389574TYHUDFQW4324, cidxD, cidxL, BNMFLGN3O4IHRNDFKLW3QP423Idx + 0.5),     idxL - fidxL, idxD - fidxD))   + (bilerp(tex3D<int2>(DFKLH389574TYHUDFQW4324, fidxU, fidxR, BNMFLGN3O4IHRNDFKLW3QP423Idx + 0.5),     tex3D<int2>(DFKLH389574TYHUDFQW4324, fidxU, cidxR, BNMFLGN3O4IHRNDFKLW3QP423Idx + 0.5),     tex3D<int2>(DFKLH389574TYHUDFQW4324, cidxU, fidxR, BNMFLGN3O4IHRNDFKLW3QP423Idx + 0.5),     tex3D<int2>(DFKLH389574TYHUDFQW4324, cidxU, cidxR, BNMFLGN3O4IHRNDFKLW3QP423Idx + 0.5),     idxR - fidxR, idxU - fidxU))) * cosVal; } __syncthreads(); VNODSHF9483HUDFS[__umul24((__umul24(id.y,VN.x) + id.x),VN.z) + id.z] = summ; } }   template<typename T> void __VS345456W3RGDFGHDouble( cudaTextureObject_t& DFKLH389574TYHUDFQW4324,  cudaArray* d_OREIO93405UJIDFKLSG23Array,  int VA45TWAFSDRT6Y34, int UIOYUJTR6879U5RTGHBNGJT, int ZZZXCVSADF345546,  T* B34E5TEWRGB45TWEFSFG,  cudaMemcpyKind VNASKJDFN30TUGIJOKDF,  cudaTextureAddressMode addressMode, cudaTextureFilterMode _DSVF_234OITHJDFSN,  cudaTextureReadMode DFKLHGDKJ8934YHJDFKRHIN2894, bool isNormalized)  { cudaExtent OREIO93405UJIDFKLSG23Size; OREIO93405UJIDFKLSG23Size.width = VA45TWAFSDRT6Y34; OREIO93405UJIDFKLSG23Size.height = UIOYUJTR6879U5RTGHBNGJT; OREIO93405UJIDFKLSG23Size.depth = ZZZXCVSADF345546; cudaChannelFormatDesc channelDesc = cudaCreateChannelDesc<T>(); cudaMalloc3DArray(&d_OREIO93405UJIDFKLSG23Array, &channelDesc, OREIO93405UJIDFKLSG23Size); cudaMemcpy3DParms copyParams = {0}; copyParams.srcPtr = make_cudaPitchedPtr( (void*)B34E5TEWRGB45TWEFSFG, OREIO93405UJIDFKLSG23Size.width * sizeof(T), OREIO93405UJIDFKLSG23Size.width, OREIO93405UJIDFKLSG23Size.height); copyParams.dstArray = d_OREIO93405UJIDFKLSG23Array; copyParams.extent = OREIO93405UJIDFKLSG23Size; copyParams.kind = VNASKJDFN30TUGIJOKDF; cudaMemcpy3D(&copyParams); cudaResourceDesc resDesc; memset(&resDesc, 0, sizeof(resDesc)); resDesc.resType = cudaResourceTypeArray; resDesc.res.array.array = d_OREIO93405UJIDFKLSG23Array; cudaTextureDesc texDesc; memset(&texDesc, 0, sizeof(texDesc)); texDesc.addressMode[0] = addressMode; texDesc.addressMode[1] = addressMode; texDesc.addressMode[2] = addressMode; texDesc.filterMode = _DSVF_234OITHJDFSN; texDesc.readMode = DFKLHGDKJ8934YHJDFKRHIN2894;  texDesc.normalizedCoords = isNormalized; CUDA_SAFE_CALL(cudaCreateTextureObject(&DFKLH389574TYHUDFQW4324, &resDesc, &texDesc,nullptr)); }  struct DSMNFKLJVHSDF902834NJBY0QHUIVGSDW34 {     typedef thrust::tuple<double, double> InTuple;      DSMNFKLJVHSDF902834NJBY0QHUIVGSDW34(const double _NJU8765TGHJKO987YGH, const double _VCVCVDF34ASDFQ2, const double _OPYURTOI56890):NJU8765TGHJKO987YGH(_NJU8765TGHJKO987YGH),VCVCVDF34ASDFQ2(_VCVCVDF34ASDFQ2),OPYURTOI56890(_OPYURTOI56890){}      double NJU8765TGHJKO987YGH;     double VCVCVDF34ASDFQ2;     double OPYURTOI56890;      __device__ double3 operator()(const InTuple& tp)     {         double curBNMFLGN3O4IHRNDFKLW3QP423 = regularizeAngle(thrust::get<0>(tp));         double zP = thrust::get<1>(tp);         double cosT = cos(curBNMFLGN3O4IHRNDFKLW3QP423);         double sinT = sin(curBNMFLGN3O4IHRNDFKLW3QP423);          return make_double3(cosT,sinT,zP);     } };  extern "C" void DD3_gpu_back_double( const float NJU8765TGHJKO987YGH, const float VCVCVDF34ASDFQ2,const float OPYURTOI56890, const int VRTJGRFDGE3434878789,const int NBTJN5948NRFD, const float *  XCV423FEDFV,const float *  BVHTY654RGBGNH,const float *  V345THBSD, const float imgXCenter,const float imgYCenter,const float imgZCenter, const float *  hBNMFLGN3O4IHRNDFKLW3QP423s,const float *  hzPos,const int MVNDJSKFSDH234, const int XN,const int YN,const int XCZNVKJR23SDF, float *hVNODSHF9483HUDFS, const float *  hOREIO93405UJIDFKLSG23, const float dx,const float dz, const byte * const mask,const int BNUIOL7U6YRTGFHKI576,const int gpunum) { CUDA_CHECK_RETURN(cudaSetDevice(gpunum)); CUDA_CHECK_RETURN(cudaDeviceReset()); double3 VMNXKCNQWE21353THG = make_double3((XN - 1.0) * 0.5 - imgXCenter / dx,(YN - 1.0) * 0.5 - imgYCenter / dx,(XCZNVKJR23SDF - 1.0) * 0.5 - imgZCenter / dz); double3 sour = make_double3(NJU8765TGHJKO987YGH, VCVCVDF34ASDFQ2, OPYURTOI56890); thrust::device_vector<byte> NKLDFNGKJH5894HOGN34(mask, mask + XN * YN); thrust::device_vector<double> VNODSHF9483HUDFS(XN * YN * XCZNVKJR23SDF, 0); const double DFKLGJR5NDFKERG2930572305743 = hypot(XCV423FEDFV[0] - NJU8765TGHJKO987YGH, BVHTY654RGBGNH[0] - VCVCVDF34ASDFQ2); thrust::device_vector<double3> _B3N948EONUJAW45(MVNDJSKFSDH234); thrust::device_vector<double> BNMFLGN3O4IHRNDFKLW3QP423s(hBNMFLGN3O4IHRNDFKLW3QP423s, hBNMFLGN3O4IHRNDFKLW3QP423s+MVNDJSKFSDH234); thrust::device_vector<double> zPos(hzPos, hzPos + MVNDJSKFSDH234); thrust::transform( thrust::make_zip_iterator(thrust::make_tuple(BNMFLGN3O4IHRNDFKLW3QP423s.begin(), zPos.begin())), thrust::make_zip_iterator(thrust::make_tuple(BNMFLGN3O4IHRNDFKLW3QP423s.end(),zPos.end())), _B3N948EONUJAW45.begin(), DSMNFKLJVHSDF902834NJBY0QHUIVGSDW34(NJU8765TGHJKO987YGH,VCVCVDF34ASDFQ2,OPYURTOI56890));  double4 detParas = VNAEGFKLJN893HIOGNAFSDFQ23( const_cast<float*>(XCV423FEDFV), const_cast<float*>(BVHTY654RGBGNH), const_cast<float*>(V345THBSD), NJU8765TGHJKO987YGH, VCVCVDF34ASDFQ2, OPYURTOI56890, VRTJGRFDGE3434878789, NBTJN5948NRFD);  cudaArray *d_OREIO93405UJIDFKLSG23Array = nullptr; cudaTextureObject_t DFKLH389574TYHUDFQW4324; dim3 NDFKLJBH893THUIDF; dim3 VNERG8945HUBNJKFG35768IYUTJHRE; thrust::device_vector<int2> OREIO93405UJIDFKLSG23SAT;  OREIO93405UJIDFKLSG23SAT = ___KLDFGJGSDFGSDFNDGGS_Double(const_cast<float*>(hOREIO93405UJIDFKLSG23), VRTJGRFDGE3434878789, NBTJN5948NRFD, MVNDJSKFSDH234); __VS345456W3RGDFGHDouble<int2>(DFKLH389574TYHUDFQW4324,d_OREIO93405UJIDFKLSG23Array,NBTJN5948NRFD + 1,VRTJGRFDGE3434878789 + 1,MVNDJSKFSDH234,   thrust::raw_pointer_cast(&OREIO93405UJIDFKLSG23SAT[0]), cudaMemcpyDeviceToDevice,   cudaAddressModeClamp,cudaFilterModePoint,cudaReadModeElementType,false); OREIO93405UJIDFKLSG23SAT.clear();  NDFKLJBH893THUIDF.x = VNJSD38VV; NDFKLJBH893THUIDF.y = VSER23RTY5Z; NDFKLJBH893THUIDF.z = BVN54VBSF; VNERG8945HUBNJKFG35768IYUTJHRE.x = (XCZNVKJR23SDF + NDFKLJBH893THUIDF.x - 1) / NDFKLJBH893THUIDF.x; VNERG8945HUBNJKFG35768IYUTJHRE.y = (XN + NDFKLJBH893THUIDF.y - 1) / NDFKLJBH893THUIDF.y; VNERG8945HUBNJKFG35768IYUTJHRE.z = (YN + NDFKLJBH893THUIDF.z - 1) / NDFKLJBH893THUIDF.z;  _NSVDKLJFHG983Q4ASCKVH2894UWIO34_double<<<VNERG8945HUBNJKFG35768IYUTJHRE,NDFKLJBH893THUIDF>>>(DFKLH389574TYHUDFQW4324, thrust::raw_pointer_cast(&VNODSHF9483HUDFS[0]), thrust::raw_pointer_cast(&NKLDFNGKJH5894HOGN34[0]), thrust::raw_pointer_cast(&_B3N948EONUJAW45[0]), sour, DFKLGJR5NDFKERG2930572305743, VMNXKCNQWE21353THG, dx, dz, detParas.z, detParas.w, make_double2(detParas.x, detParas.y), make_int3(XN, YN, XCZNVKJR23SDF), MVNDJSKFSDH234, static_cast<int>(BNUIOL7U6YRTGFHKI576!=0));  thrust::copy(VNODSHF9483HUDFS.begin(),VNODSHF9483HUDFS.end(),hVNODSHF9483HUDFS); _CNXV834J9H0V34VNP9348Y(DFKLH389574TYHUDFQW4324, d_OREIO93405UJIDFKLSG23Array);  VNODSHF9483HUDFS.clear(); NKLDFNGKJH5894HOGN34.clear(); BNMFLGN3O4IHRNDFKLW3QP423s.clear(); zPos.clear(); _B3N948EONUJAW45.clear(); }  __device__ float _DNCFLKJ3W904__DKLCVN3948NJGPQ08934WGD(const float2 a,const float2 b) { return a.x * b.y - a.y * b.x; }  __global__ void DFKLVN893W5RHEBNJ8934YUIRE( const float* NSDFHW5T89GHIBNSJFKGYH289WKLJXCVH2P893H, float* VNODSHF9483HUDFS, float S2O, float detCntIdU, float detCntIdV, int XN, int YN, int XCZNVKJR23SDF, int VRTJGRFDGE3434878789, int NBTJN5948NRFD, int MVNDJSKFSDH234, float VBMNNDFGJIH5894, float MBNJTNOUBDNGI, float dx, float dz, float DFKLGJR5NDFKERG2930572305743, float3* _B3N948EONUJAW45, float NJU8765TGHJKO987YGH, float VCVCVDF34ASDFQ2, float OPYURTOI56890, float VMNXKCNQWE21353THGX, float VMNXKCNQWE21353THGY, float VMNXKCNQWE21353THGZ,byte* mask) { const int kk = threadIdx.x + blockIdx.x * blockDim.x; const int VDNSRFKLVNKL3KLJG9340UERIGKLJ = threadIdx.y + blockIdx.y * blockDim.y; const int jj = threadIdx.z + blockIdx.z * blockDim.z; if (VDNSRFKLVNKL3KLJG9340UERIGKLJ < XN && jj < YN && kk < XCZNVKJR23SDF) { if(mask[jj * XN + VDNSRFKLVNKL3KLJG9340UERIGKLJ] != 1) return; float summ = 0;  float3 curvox = make_float3((VDNSRFKLVNKL3KLJG9340UERIGKLJ - VMNXKCNQWE21353THGX) * dx, (jj - VMNXKCNQWE21353THGY) * dx, (kk - VMNXKCNQWE21353THGZ) * dz);  for (int BNMFLGN3O4IHRNDFKLW3QP423Idx = 0; BNMFLGN3O4IHRNDFKLW3QP423Idx < MVNDJSKFSDH234; ++BNMFLGN3O4IHRNDFKLW3QP423Idx) { float3 cossinzt = _B3N948EONUJAW45[BNMFLGN3O4IHRNDFKLW3QP423Idx]; float3 cursour = make_float3( NJU8765TGHJKO987YGH * cossinzt.x - VCVCVDF34ASDFQ2 * cossinzt.y, NJU8765TGHJKO987YGH * cossinzt.y + VCVCVDF34ASDFQ2 * cossinzt.x, OPYURTOI56890 + cossinzt.z); float3 MBNGFKLNBORJFKV = (cursour - curvox); float lMBNGFKLNBORJFKV = length(MBNGFKLNBORJFKV);  float2 MBNGFKLNBORJFKVSour = normalize(make_float2(-cursour.x,-cursour.y));  float2 MBNGFKLNBORJFKV1; float2 MBNGFKLNBORJFKV2; float betaLft; float betaRgh; float w;  if(fabsf(MBNGFKLNBORJFKV.x) < fabsf(MBNGFKLNBORJFKV.y)) { MBNGFKLNBORJFKV1 = normalize(make_float2(curvox.x - 0.5 * dx - cursour.x, curvox.y - cursour.y)); MBNGFKLNBORJFKV2 = normalize(make_float2(curvox.x + 0.5 * dx - cursour.x, curvox.y - cursour.y)); w = fabsf(MBNGFKLNBORJFKV.y); } else { MBNGFKLNBORJFKV1 = normalize(make_float2(curvox.x - cursour.x, curvox.y - cursour.y - 0.5 * dx)); MBNGFKLNBORJFKV2 = normalize(make_float2(curvox.x - cursour.x, curvox.y - cursour.y + 0.5 * dx)); w = fabsf(MBNGFKLNBORJFKV.x); } betaLft = asinf(_DNCFLKJ3W904__DKLCVN3948NJGPQ08934WGD(MBNGFKLNBORJFKVSour, MBNGFKLNBORJFKV1)); betaRgh = asinf(_DNCFLKJ3W904__DKLCVN3948NJGPQ08934WGD(MBNGFKLNBORJFKVSour, MBNGFKLNBORJFKV2));  if(betaLft > betaRgh) { float tmp = betaLft; betaLft = betaRgh; betaRgh = tmp; } float betaVA45TWAFSDRT6Y34 = betaRgh - betaLft; int idxL = floorf(betaLft / VBMNNDFGJIH5894 + detCntIdU) - 2; int idxR = ceilf(betaRgh / VBMNNDFGJIH5894 + detCntIdU) + 2; if(idxL > VRTJGRFDGE3434878789 - 1){continue;} if(idxR < 0){continue;} if(idxL < 0){idxL = 0;} if(idxR > VRTJGRFDGE3434878789 - 1){idxR = VRTJGRFDGE3434878789 - 1;}  float sour2voxHorizontalDis = sqrtf((cursour.x - curvox.x) * (cursour.x - curvox.x) + (cursour.y - curvox.y) * (cursour.y - curvox.y)); float relvUIOYUJTR6879U5RTGHBNGJTUp = DFKLGJR5NDFKERG2930572305743  / sour2voxHorizontalDis * (curvox.z + 0.5f * dz - cursour.z); float relvUIOYUJTR6879U5RTGHBNGJTDn = DFKLGJR5NDFKERG2930572305743  / sour2voxHorizontalDis * (curvox.z - 0.5f * dz - cursour.z);   int idxU = ceilf(relvUIOYUJTR6879U5RTGHBNGJTUp / MBNJTNOUBDNGI + detCntIdV) + 2; int idxD = floorf(relvUIOYUJTR6879U5RTGHBNGJTDn / MBNJTNOUBDNGI + detCntIdV) - 2; if(idxU < 0){continue;} if(idxD > NBTJN5948NRFD - 1){continue;} if(idxU > NBTJN5948NRFD - 1){idxU = NBTJN5948NRFD - 1;} if(idxD < 0){idxD = 0;}  for(int uIdx = idxL; uIdx <= idxR; ++uIdx) { float lftBeta = (uIdx - detCntIdU - 0.5f) * VBMNNDFGJIH5894; float rghBeta = (uIdx - detCntIdU + 0.5f) * VBMNNDFGJIH5894; float betaIntersection = intersectLength_device<float>(betaLft, betaRgh, lftBeta, rghBeta); if(betaIntersection > 0){ for(int vIdx = idxD; vIdx <= idxU; ++vIdx) { float dnZ = (vIdx - detCntIdV - 0.5f) * MBNJTNOUBDNGI; float upZ = (vIdx - detCntIdV + 0.5f) * MBNJTNOUBDNGI; float zIntersection = intersectLength_device<float>(relvUIOYUJTR6879U5RTGHBNGJTDn, relvUIOYUJTR6879U5RTGHBNGJTUp, dnZ, upZ); if(zIntersection > 0) { summ += NSDFHW5T89GHIBNSJFKGYH289WKLJXCVH2P893H[(BNMFLGN3O4IHRNDFKLW3QP423Idx * VRTJGRFDGE3434878789 + uIdx) * NBTJN5948NRFD + vIdx] * dx / w * lMBNGFKLNBORJFKV * (betaIntersection * zIntersection) / betaVA45TWAFSDRT6Y34; } else { summ += 0; } }  }  } }  VNODSHF9483HUDFS[(jj * XN + VDNSRFKLVNKL3KLJG9340UERIGKLJ) * XCZNVKJR23SDF + kk] = summ; } }   void VNREGH8945POTNBJGKASDFQ34TSDF456(float NJU8765TGHJKO987YGH, float VCVCVDF34ASDFQ2, float OPYURTOI56890, int VRTJGRFDGE3434878789, int NBTJN5948NRFD, float* XCV423FEDFV, float* BVHTY654RGBGNH, float* V345THBSD, float imgXCenter, float imgYCenter, float imgZCenter, float* hBNMFLGN3O4IHRNDFKLW3QP423s, float* hzPos, int MVNDJSKFSDH234, int XN, int YN, int XCZNVKJR23SDF, float* hVNODSHF9483HUDFS, float* hOREIO93405UJIDFKLSG23, float dx, float dz, byte* mask, int gpunum, int BNUIOL7U6YRTGFHKI576) {     cudaSetDevice(gpunum);     cudaDeviceReset(); thrust::device_vector<float> NSDFHW5T89GHIBNSJFKGYH289WKLJXCVH2P893H(hOREIO93405UJIDFKLSG23, hOREIO93405UJIDFKLSG23 + VRTJGRFDGE3434878789 * NBTJN5948NRFD * MVNDJSKFSDH234); thrust::device_vector<float> VNODSHF9483HUDFS(hVNODSHF9483HUDFS, hVNODSHF9483HUDFS + XN * YN * XCZNVKJR23SDF); thrust::device_vector<byte> dmask(mask, mask + XN * YN);  thrust::host_vector<float3> _B3N948EONUJAW45(MVNDJSKFSDH234); for (int i = 0; i != MVNDJSKFSDH234; ++i) { _B3N948EONUJAW45[i].x = cosf(static_cast<float>(i) / static_cast<float>(MVNDJSKFSDH234) * 3.141592653589793 * 2.0f); _B3N948EONUJAW45[i].y = sinf(static_cast<float>(i) / static_cast<float>(MVNDJSKFSDH234) * 3.141592653589793 * 2.0f); _B3N948EONUJAW45[i].z = hzPos[i]; } thrust::device_vector<float3> d_B3N948EONUJAW45 = _B3N948EONUJAW45;  const float VMNXKCNQWE21353THGX = (XN - 1.0f) * 0.5f; const float VMNXKCNQWE21353THGY = (YN - 1.0f) * 0.5f; const float VMNXKCNQWE21353THGZ = (XCZNVKJR23SDF - 1.0f) * 0.5f;  const float S2O = VCVCVDF34ASDFQ2; const float DFKLGJR5NDFKERG2930572305743 = sqrtf(powf(NJU8765TGHJKO987YGH - XCV423FEDFV[0],2.0f) + powf(VCVCVDF34ASDFQ2 - BVHTY654RGBGNH[0],2.0f));  thrust::host_vector<float> bXCV423FEDFV(VRTJGRFDGE3434878789 + 1, 0); thrust::host_vector<float> bBVHTY654RGBGNH(VRTJGRFDGE3434878789 + 1, 0); thrust::host_vector<float> bV345THBSD(NBTJN5948NRFD + 1, 0);  DD3Boundaries(VRTJGRFDGE3434878789 + 1, XCV423FEDFV, &bXCV423FEDFV[0]); DD3Boundaries(VRTJGRFDGE3434878789 + 1, BVHTY654RGBGNH, &bBVHTY654RGBGNH[0]); DD3Boundaries(NBTJN5948NRFD + 1, V345THBSD, &bV345THBSD[0]);  const float detVA45TWAFSDRT6Y34 = sqrtf(powf(XCV423FEDFV[1] - XCV423FEDFV[0],2.0f) + powf(BVHTY654RGBGNH[0] - VCVCVDF34ASDFQ2, 2.0f)); const float VBMNNDFGJIH5894 = atanf(detVA45TWAFSDRT6Y34 *0.5f / DFKLGJR5NDFKERG2930572305743) * 2.0f; const float lftTheta = atanf(bXCV423FEDFV[0] / (bBVHTY654RGBGNH[0] - VCVCVDF34ASDFQ2)); const float detCntIdU = lftTheta / VBMNNDFGJIH5894 - 0.5f; const float MBNJTNOUBDNGI = V345THBSD[1] - V345THBSD[0]; const float detCntIdV = -bV345THBSD[0] / MBNJTNOUBDNGI - 0.5f;  dim3 NDFKLJBH893THUIDF(64,4,1); dim3 VNERG8945HUBNJKFG35768IYUTJHRE( (XCZNVKJR23SDF + NDFKLJBH893THUIDF.x - 1) / NDFKLJBH893THUIDF.x, (XN + NDFKLJBH893THUIDF.y - 1) / NDFKLJBH893THUIDF.y, (YN + NDFKLJBH893THUIDF.z - 1) / NDFKLJBH893THUIDF.z);  DFKLVN893W5RHEBNJ8934YUIRE<< <VNERG8945HUBNJKFG35768IYUTJHRE, NDFKLJBH893THUIDF >> >( thrust::raw_pointer_cast(&NSDFHW5T89GHIBNSJFKGYH289WKLJXCVH2P893H[0]), thrust::raw_pointer_cast(&VNODSHF9483HUDFS[0]), S2O, detCntIdU, detCntIdV, XN, YN, XCZNVKJR23SDF, VRTJGRFDGE3434878789, NBTJN5948NRFD, MVNDJSKFSDH234, VBMNNDFGJIH5894, MBNJTNOUBDNGI, dx, dz, DFKLGJR5NDFKERG2930572305743, thrust::raw_pointer_cast(&d_B3N948EONUJAW45[0]), NJU8765TGHJKO987YGH, VCVCVDF34ASDFQ2, OPYURTOI56890, VMNXKCNQWE21353THGX, VMNXKCNQWE21353THGY, VMNXKCNQWE21353THGZ, thrust::raw_pointer_cast(&dmask[0])); thrust::copy(VNODSHF9483HUDFS.begin(),VNODSHF9483HUDFS.end(),hVNODSHF9483HUDFS); }   extern "C" void DD3Back_gpu(   float NJU8765TGHJKO987YGH, float VCVCVDF34ASDFQ2, float OPYURTOI56890,    int VRTJGRFDGE3434878789, int NBTJN5948NRFD,     float* XCV423FEDFV, float* BVHTY654RGBGNH, float* V345THBSD,    float imgXCenter, float imgYCenter, float imgZCenter,    float* hBNMFLGN3O4IHRNDFKLW3QP423s, float* hzPos, int MVNDJSKFSDH234,   int XN, int YN, int XCZNVKJR23SDF,    float* hVNODSHF9483HUDFS, float* hOREIO93405UJIDFKLSG23,    float dx, float dz,   byte* mask, int gpunum, int BNUIOL7U6YRTGFHKI576, int OREIO93405UJIDFKLSG23Mode) {  switch(OREIO93405UJIDFKLSG23Mode) { case 0: DD3_gpu_back<BDRFGYUIP345>(NJU8765TGHJKO987YGH, VCVCVDF34ASDFQ2, OPYURTOI56890, VRTJGRFDGE3434878789, NBTJN5948NRFD, XCV423FEDFV, BVHTY654RGBGNH, V345THBSD, imgXCenter, imgYCenter, imgZCenter, hBNMFLGN3O4IHRNDFKLW3QP423s, hzPos, MVNDJSKFSDH234, XN, YN, XCZNVKJR23SDF, hVNODSHF9483HUDFS, hOREIO93405UJIDFKLSG23, dx, dz, mask, BNUIOL7U6YRTGFHKI576, 0); break; case 1: DD3_gpu_back<VZXCQAWD43HRTGFHN6754EFSD>(NJU8765TGHJKO987YGH, VCVCVDF34ASDFQ2, OPYURTOI56890, VRTJGRFDGE3434878789, NBTJN5948NRFD, XCV423FEDFV, BVHTY654RGBGNH, V345THBSD, imgXCenter, imgYCenter, imgZCenter, hBNMFLGN3O4IHRNDFKLW3QP423s, hzPos, MVNDJSKFSDH234, XN, YN, XCZNVKJR23SDF, hVNODSHF9483HUDFS, hOREIO93405UJIDFKLSG23, dx, dz, mask, BNUIOL7U6YRTGFHKI576, 0); break; case 2:             DD3_gpu_back_double(NJU8765TGHJKO987YGH, VCVCVDF34ASDFQ2, OPYURTOI56890, VRTJGRFDGE3434878789, NBTJN5948NRFD,             XCV423FEDFV, BVHTY654RGBGNH, V345THBSD,                     imgXCenter, imgYCenter, imgZCenter,             hBNMFLGN3O4IHRNDFKLW3QP423s, hzPos, MVNDJSKFSDH234, XN, YN, XCZNVKJR23SDF,             hVNODSHF9483HUDFS,  hOREIO93405UJIDFKLSG23, dx, dz, mask, BNUIOL7U6YRTGFHKI576, 0); break; case 3: DD3_gpu_back<QASCFG54EDFGHJ>(NJU8765TGHJKO987YGH, VCVCVDF34ASDFQ2, OPYURTOI56890, VRTJGRFDGE3434878789, NBTJN5948NRFD, XCV423FEDFV, BVHTY654RGBGNH, V345THBSD, imgXCenter, imgYCenter, imgZCenter, hBNMFLGN3O4IHRNDFKLW3QP423s, hzPos, MVNDJSKFSDH234, XN, YN, XCZNVKJR23SDF, hVNODSHF9483HUDFS, hOREIO93405UJIDFKLSG23, dx, dz, mask, BNUIOL7U6YRTGFHKI576, 0); break;         case 4:             VNREGH8945POTNBJGKASDFQ34TSDF456(NJU8765TGHJKO987YGH, VCVCVDF34ASDFQ2, OPYURTOI56890, VRTJGRFDGE3434878789, NBTJN5948NRFD,XCV423FEDFV, BVHTY654RGBGNH, V345THBSD, imgXCenter, imgYCenter, imgZCenter,                 hBNMFLGN3O4IHRNDFKLW3QP423s, hzPos, MVNDJSKFSDH234, XN, YN, XCZNVKJR23SDF, hVNODSHF9483HUDFS, hOREIO93405UJIDFKLSG23, dx, dz, mask, 0, 0);             break; default: DD3_gpu_back<BDRFGYUIP345>(NJU8765TGHJKO987YGH, VCVCVDF34ASDFQ2, OPYURTOI56890, VRTJGRFDGE3434878789, NBTJN5948NRFD, XCV423FEDFV, BVHTY654RGBGNH, V345THBSD, imgXCenter, imgYCenter, imgZCenter, hBNMFLGN3O4IHRNDFKLW3QP423s, hzPos, MVNDJSKFSDH234, XN, YN, XCZNVKJR23SDF, hVNODSHF9483HUDFS, hOREIO93405UJIDFKLSG23, dx, dz, mask, BNUIOL7U6YRTGFHKI576, 0); break; } }  
